{
    "title": "HyeJf1HKvS",
    "content": "This work introduces a two-stage neural architecture for learning structural correspondences between graphs. It utilizes localized node embeddings from a graph neural network to rank soft correspondences initially, followed by synchronous message passing networks to iteratively re-rank correspondences and achieve a consensus in local neighborhoods. The method is shown to be effective in real-world tasks like computer vision and entity alignment between knowledge graphs, outperforming current state-of-the-art approaches. Graph matching is crucial in various real-world applications like cheminformatics, bioinformatics, social network analysis, and computer vision. The problem has been extensively studied in theory and practice, often involving domain-agnostic distances and NP-hard optimization. However, purely combinatorial approaches may not be suitable for large-scale instances and fail to adapt to data distribution. Various neural architectures have been proposed to tackle graph matching or similarity in a data-dependent fashion. However, current approaches have limitations such as only computing similarity scores between whole graphs, relying on inefficient global matching procedures, or not generalizing to unseen graphs. Graph matching is typically formulated as an edge-preserving quadratic assignment problem, aiming to find correspondences based on neighborhood consensus. The method proposed is based on finding correspondences using neighborhood consensus to prevent adjacent nodes in the source graph from being mapped to different regions in the target graph. It addresses supervised and semi-supervised graph matching, with a focus on generalization and utilizing complete graph structures. The proposed deep graph matching architecture involves local feature matching followed by iterative refinement. The method involves two stages: local feature matching and iterative refinement using synchronous message passing networks. The feature matching step computes initial correspondence scores based on node embeddings similarity, while the refinement strategy aims to reach neighborhood consensus for correspondences using a differentiable validator for graph isomorphism. The method is scaled to large, real-world inputs in Section 3.4. The method involves computing initial correspondence scores between nodes in source and target graphs based on node embeddings similarity. Sinkhorn normalization is applied to obtain correspondence matrices fulfilling specific constraints. The neural network is trained in a supervised fashion against ground truth correspondences, implemented as a Graph Neural Network for localized node representations. The method utilizes graph neural networks to detect violations of neighborhood consensus criteria in a localized fashion and iteratively refine correspondences. The algorithm aims to address false correspondences by iteratively updating node features through a neural message passing scheme. Various operators from geometric deep learning and relational representation learning are available for precise feature control. The proposed algorithm utilizes soft correspondence matrices to pass node functions between domains, improving neighborhood consensus through iterative updates based on graph neural networks. The method aims to refine correspondences by comparing results of GNNs and updating correspondence scores using MLPs. This iterative process combines feature matching error and neighborhood consensus error to improve the overall consensus. The algorithm uses soft correspondence matrices to enhance neighborhood consensus through iterative updates with graph neural networks. It combines feature matching error and neighborhood consensus error to refine correspondences between domains. A GNN \u03a8 \u03b82 that satisfies permutation equivariance and injectivity criteria provides equal node embeddings. Common GNN architectures are equivariant due to permutation invariant neighborhood aggregators. Injectivity can be achieved by using sum aggregation with MLPs on neighboring node features. The proposed approach relates to classical graph matching techniques and the graduated assignment algorithm. The approach involves iteratively computing new solutions by solving a linear assignment problem and applying sinkhorn normalization. It utilizes trainable neural networks to update correspondence scores and is a deep parameterized generalization of the graduated assignment algorithm. The method simplifies specifying node and edge attribute similarities in graph matching. Our approach supports continuous node and edge features using GNN models. We optimize the algorithm for scalability and propose sparsifying initial correspondences to reduce memory footprint and time complexity. The refinement phase is also optimized for efficiency. Optimizing the initial feature matching loss is crucial for efficiency. Node indicator functions are replaced with randomly drawn node functions to reduce parameter complexity. Softmax normalization is used to ensure doubly-stochastic solutions, preventing inconsistencies in correspondences. In order to improve efficiency, the proposed method relaxes constraints on softmax normalization and adjusts the number of refinement iterations for training and testing. This approach allows for faster convergence and maintains the effectiveness of the neighborhood consensus procedure. The method is validated on three different tasks. Our method is implemented in PYTORCH using the PYTORCH GEOMETRIC and the KEOPS libraries for efficient processing of sparse mini-batches with GPU acceleration. Optimization is done via ADAM with a fixed learning rate. Hits@k is used to evaluate model performance, with experiments conducted on synthetic graphs to learn matching pairs. Our method, implemented in PYTORCH using PYTORCH GEOMETRIC and KEOPS libraries, aims to learn matching for pairs of graphs in a supervised fashion. Synthetic graphs are used for training and evaluation, with experiments conducted on different configurations. Graph neural network operators are implemented with GIN operator for expressiveness in distinguishing graph structures. Input features are initialized with one-hot encodings of node degrees, and final node representations are computed using Jumping Knowledge style concatenation. Additional experiments verify the robustness of the approach towards node addition or removal. Our method, implemented in PYTORCH using PYTORCH GEOMETRIC and KEOPS libraries, aims to learn matching for pairs of graphs in a supervised fashion. Synthetic graphs are used for training and evaluation, with experiments conducted on different configurations. Graph neural network operators are implemented with GIN operator for expressiveness in distinguishing graph structures. Input features are initialized with one-hot encodings of node degrees, and final node representations are computed using Jumping Knowledge style concatenation. The matching accuracy Hits@1 for different choices of |V s | and p is shown, with observations on performance degradation with increasing structural noise. However, our proposed two-stage architecture can recover all correspondences regardless of structural noise levels. This highlights the benefits of applying matching consensus and justifies scalability enhancements. The refinement strategy in our method shows improved performance with increasing k in sparsified top k correspondences. Experiments on PASCALVOC and WILLOW-OBJECTCLASS datasets demonstrate the effectiveness of our approach. Training and testing are done on annotated images with specific criteria, resulting in successful matching outcomes. The PASCALVOC dataset contains instances of varying scale, pose, and illumination with keypoints ranging from 1 to 19, while the WILLOW-OBJECTCLASS dataset has consistent orientations with exactly 10 keypoints per image. The model is pre-trained on PASCALVOC and fine-tuned on 20 random splits for training. Graphs are constructed using Delaunay triangulation of keypoints, and input features are extracted from a pre-trained VGG16 model. The SPLINECNN graph neural network operator is used for evaluation. The SPLINECNN model is evaluated using edge features like normalized relative distances and 2D Cartesian coordinates. The network architecture includes two convolutional layers, dropout, and a linear layer. Training involves forming pairs between training examples of the same category. The model is evaluated by forming pairs between training examples of the same category and testing with graph pairs. The architecture uses isotropic and anisotropic GNNs for evaluation, showing significant improvements over competing methods. The refinement strategy reduces errors by half on the WILLOW-OBJECTCLASS dataset and up to 14 percentage points on PASCALVOC. Our approach shows improvements of up to 14 percentage points on PASCALVOC dataset by utilizing task-specific isotropic or anisotropic GNNs for geometric feature matching. Training involves generating synthetic graph pairs with randomly sampled points and adding Gaussian noise. The model is trained on these examples until it has seen 32,000 synthetic instances. Our model improves upon state-of-the-art results on the PASCALPF dataset, showing benefits of our consensus architecture. It also performs well on the DBP15K datasets, linking entities across different knowledge graphs. Entity input features are obtained using monolingual FASTTEXT embeddings aligned into the same vector space. Our graph neural network operator, based on previous work, uses ReLU and dropout for non-linearity, with a three-layer GNN for initial similarities and alignment refinement. Training involves negative log likelihood in a semi-supervised manner, updating correspondence matrices for efficiency. Results are evaluated using Hits@1 and Hits@10 metrics, showing improvements compared to previous models. Our approach improves upon the state-of-the-art on all categories with gains of up to 9.38 percentage points by refining initial correspondences. The scalability of our approach allows for multiple refinement iterations while retaining large hidden feature dimensionalities. However, the limitations of graph neural networks related to the WL heuristic for graph isomorphism testing are inherited by our method. The limitations of our approach stem from the WL heuristic for graph isomorphism testing, where convergence may fail due to nodes being assigned the same color. Adding noise to resolve ambiguities is not practical due to real-world dataset noise levels. Various related problems like maximum common subgraph and network alignment have been extensively studied. Graph neural networks have gained attention for deep graph matching research. Neural networks are a focus of research for deep graph matching techniques. A two-stage neural architecture was presented for learning node correspondences between graphs. The approach aims to reach a neighborhood consensus between matchings and can resolve violations iteratively. The algorithm was evaluated on real-world datasets and consistently outperformed the state-of-the-art. The final optimized algorithm is provided in Algorithm 1. The T-layered GNN \u03a8 \u03b82 can distinguish graph structures using injective node colorings. It maps T-hop neighborhoods around nodes i \u2208 V s and j \u2208 V t to the same vectorial representation. A permutation matrix P describes an isomorphism between graphs G s and G t. Submatrices in S describe isomorphisms between T-hop subgraphs. The injectivity requirements of AGGREGATE (t) and UPDATE (t) must be satisfied, ensuring S is a permutation matrix describing an isomorphism. Our algorithm extends the graduated assignment algorithm by using trainable parameters to improve results compared to fixed-function message passing schemes. It can learn to utilize node and edge features for refinement and offers flexibility in choosing task-dependent GNN operators. The theoretical expressivity could be further enhanced with higher-order GNNs in future work. Our approach extends the graduated assignment algorithm by using trainable parameters for improved results. Experimental validation shows robustness towards node addition or removal in synthetic experiments. The consensus stage is robust to changes, while the first stage struggles with finding the right matching due to unmatched nodes not influencing the neighborhood consensus error. The neural architecture can detect and decrease false positive influence in the refinement stage. In graph theory, the problem of identifying correspondences between nodes in two graphs is studied under different terms. The maximum common subgraph isomorphism problem is NP-hard and difficult to approximate with theoretical guarantees. Different techniques have been developed in bioinformatics and computer vision, known as network alignment or graph matching, for large networks without specific structural properties. Graph matching involves minimizing a function for two graphs with adjacency matrices. Previous research has focused on using algorithms like Frank-Wolfe and projection to find optimal solutions. The applicability of these methods is still not well understood, with limited theoretical results available. The WL heuristic is known to distinguish between graphs if no fractional solution exists. The Frank-Wolfe algorithm can be modified for WL partition. Different relaxations for graph matching exist, such as spectral relaxations and random walks. Graph matching is related to the quadratic assignment problem (QAP). Recent literature considers weighted versions, leading to Lawler's QAP. Zhou & De la Torre proposed a computational demanding approach involving an affinity matrix. Recent advancements in graph matching include factorizing the affinity matrix into smaller matrices to incorporate global geometric constraints, kernelized graph matching using node and edge similarities as kernels, Lagrangean decompositions solved by dual ascent algorithms, and functional representation to avoid constructing the affinity matrix. Graph edit distance measures the minimum cost to transform one graph into another by adding, deleting, and substituting vertices. The graph edit distance problem involves transforming a graph by adding, deleting, and substituting vertices and edges. It is NP-hard and related to the maximum common subgraph and quadratic assignment problems. Various algorithms have been proposed, including exact algorithms and heuristics based on the assignment problem. The original approach has cubic running time but can be reduced to quadratic or linear time with different strategies. Network alignment involves defining a similarity function between pairs of nodes and using a two-step approach with a node-to-node similarity matrix. Most algorithms for network alignment involve computing a node-to-node similarity matrix and solving the assignment problem. ISORANK by Singh et al. (2008) uses the adjacency matrix of the product graph, while Kollias et al. (2012) propose an efficient approximation. Zhang (2016) extends support for vertex and edge similarities, and Klau (2009) linearizes the quadratic optimization problem. Bayati et al. (2013) developed a message passing algorithm for sparse network alignment. In network alignment, the goal is to find optimal correspondences between vertices of two graphs using various techniques. Learning node and edge similarity functions for specific tasks has been proposed, along with deep graph matching procedures that utilize local node feature matchings and cross-graph embeddings. The idea of refining local feature matchings by enforcing neighborhood consistency has been relevant for matching in images. The functional maps framework aims to solve a similar problem for manifolds. The problem of graph matching has been extensively studied with deep learning approaches. Various methods have been developed, such as supervised deep graph matching networks by Zanfir & Sminchisescu (2018), Wang et al. (2019b), and Zhang & Lee (2019). These approaches use different techniques like displacement objectives, combinatorial objectives, and node-wise features with dense node-to-node affinities. However, our approach focuses on fully learnable matching procedures and resolving inconsistent neighborhood assignments. Additionally, Xu et al. (2019b) relate graph matching to the Gromov-Wasserstein discrepancy for optimal transport. The optimal transport objective is enhanced by learning node embeddings to account for noise in graphs. Xu et al. (2019a) extend this concept to multi-graph partitioning and matching using Gromov-Wasserstein barycenter. Different approaches like leveraging CYCLEGANs for network alignment and utilizing graph neural networks for graph edit distance approximation have also been explored. In a follow-up work, Bai et al. (2018) proposed a breadth-first-search approach to order the correspondence matrix for graph edit distance approximation. Wang et al. (2019b) and Xu et al. (2019d) enhance GNN operators by incorporating information from similar embeddings in other graphs. Wang & Solomon (2019) address point cloud matching using a differentiable SVD module and Transformer module for intra-graph node embeddings. In computer vision, methods for neighborhood consensus in image matching have a history of improving local feature matching results efficiently. A recent deep neural network approach using 4D convolution was proposed, but it cannot be directly applied to the graph domain due to scalability issues. Our algorithm aims to strengthen initial feature matching by leveraging these methods, making it complementary to advancements in the field. Our algorithm enhances initial feature matching by applying a Graph Neural Network (GNN) on the product graph, inferring errors for the sparse graph, and performing computations on the original graphs. The functional maps framework defines continuous maps between function spaces on manifolds."
}