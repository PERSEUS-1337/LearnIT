{
    "title": "rkeeQmm0cX",
    "content": "Deep neural networks (DNNs) have emerged as a powerful solution this year for addressing longstanding issues in artificial intelligence. Deep neural networks (DNNs) are applied to cyber security use cases such as Android malware classification, incident detection, and fraud detection. DNNs outperform classical machine learning algorithms by extracting better features and achieving higher accuracy. The best accuracy obtained by DNNs and XGBoost are 0.940 and 0.741 for Android malware classification, 1.00 and 0.997 for incident detection, and 0.972 and 0.916 for fraud detection, respectively. In the era of technical modernization, new opportunities and potential resources have emerged, but they also bring threats to the economy. Hacking has become common in organizations, highlighting the need for efficient fraud detection systems. Cyber security is crucial for protecting systems, networks, and data in the cyberspace. Malware poses a significant security threat, with antivirus and blacklists being primary defense mechanisms, although not entirely effective. Deep learning approaches are becoming prevalent in cyber security due to their remarkable performance. This paper evaluates the effectiveness of deep neural networks for Android malware classification, incident detection, and fraud detection. Sections II to VI discuss related work, background knowledge of DNNs, methodology, data set description, results, and conclusion. The related work for cyber security use cases includes Android malware classification, incident detection, and fraud detection. Static and dynamic analysis are commonly used approaches in Android malware detection. Static analysis involves collecting android permissions, while dynamic analysis looks at run-time execution characteristics. Commercial systems often use a combination of both methods. Static analysis is preferred in Android devices for its advantages such as low computational cost and resource utilization. However, dynamic analysis is capable of detecting metamorphic and polymorphic malwares. Traditional machine learning classifiers have shown good performance in android malware detection using features like API calls and permissions. Machine learning classifiers, combined with API calls and permission features, show good performance in detecting Android malware. MalDozer by BID4 uses deep learning to classify malware into families, performing well on private and public datasets. BID5 briefly discusses privacy and security in cloud computing, categorizing 28 security issues into five categories. BID6 proposes machine learning-based anomaly detection on different layers, while BID7 addresses intrusion detection in cloud infrastructure. BID8 discusses security problems in the cloud and proposes an incident detection system. BID9 compares traditional machine learning classifiers for financial fraud detection, and BID10 discusses incident detection systems in comparison to intrusion detection. Deep learning, a sub model of machine learning, is widely used for cyber security use cases. A unique DNN architecture is proposed for efficient use in various cyber security scenarios. The concept of deep neural networks (DNNs) architecture and techniques for training them are discussed, influenced by biological neural networks. Feed forward networks (FFNs) are simple and commonly used algorithms in artificial neural networks. Multi-layer perceptron (MLP) is a subset of FFN with 3 or more layers of artificial neurons. The number of hidden layers can be increased for complex data. MLP passes information forward without forming cycles. It can be represented as O : R p \u00d7 R q, where p and q are the input and output vector sizes. The computation of hidden layers can be mathematically formulated. Rectified linear units (ReLU) are efficient for accelerating training. The training process for deep learning architectures involves using ReLU activation function for faster training with TensorFlow and Keras. GPU enabled TensorFlow is used for gradient descent computations. In Task 1, a dataset of unique API information from APK files collected from Opera Mobile Store is used for Android malware classification. Task 2 involves analyzing operational log files from Unified Threat Management (UTM) of UniteCloud BID25, which provides e-learning and e-research services in New Zealand. Each log file sample contains nine features related to incident status. Task 3 focuses on fraud detection using anonymized data unified with a synthetic data approach. The experiments involved finding the optimal learning rate for deep learning architectures with various network topologies. The highest accuracy was achieved at a learning rate of 0.1 after running experiments till 500 epochs. Further experiments showed decreased performance with more complex architectures, leading to the decision to stick with a learning rate of 0.1. Various network structures were tested, including DNNs with 1 to 5 layers, with most architectures learning the normal category effectively. The experiments involved finding the optimal learning rate for deep learning architectures with various network topologies. Most architectures learned the normal category patterns within 600 epochs, while the number of epochs needed for malicious category data varied. The best performing network topology for each use case was determined, with 5-layer DNNs network chosen for further experiments. The architecture included an input layer, 5 hidden layers, and an output layer with varying neuron counts for different tasks. The structure and configuration details are provided in TAB0. The deep neural network architecture in TAB0 consists of fully-connected layers, batch normalization, and dropout layers to prevent overfitting and speed up model training. The fully-connected layers map data into high dimensions for accurate output determination using ReLU activation function. Dropout (0.01) and Batch Normalization are used between fully-connected layers. The final fully connected layer follows a sigmoid activation function for classification in Task 1 and Task 2. The final fully connected layer uses sigmoid activation for Task 1 and Task 2, softmax for Task 3. It predicts benign (0) or malicious (1) for Task 1 and Task 2 using binary cross entropy, and probability scores for each class in Task 3 using categorical cross entropy. The model is optimized using SGD. The DNN model is evaluated on three cyber security use cases: Android malware detection, incident detection on UniteCloud, and fraud detection in financial transactions. Training involves passing matrices of specific shapes for each task. XGBoost is used for supervised learning problems in financial transactions. Training data is used to predict a target variable using \"multi:softmax\" for classification. \"Max depth\" of the tree is set as 20, and 10 fold cross validation is performed for training accuracy. Data is loaded using Pandas, with \"NaN\" values replaced with 0. Task 1 data is represented as a term-document matrix using count vectorizer. The proposed method achieved high accuracy on CDMC 2017 tasks using Random Forest classifier with Python scikit-learn BID11. DNNs showed good performance in cyber security use cases compared to classical machine learning classifiers. The method can automatically obtain the best features and outperforms other classifiers in all use cases. The proposed method achieved high accuracy on CDMC 2017 tasks using Random Forest classifier with Python scikit-learn BID11. DNNs showed good performance in cyber security use cases compared to classical machine learning classifiers. Results of DNNs can be improved by adding more layers to existing architectures, which is a direction for future work."
}