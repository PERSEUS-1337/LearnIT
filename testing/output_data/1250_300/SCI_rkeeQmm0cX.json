{
    "title": "rkeeQmm0cX",
    "content": "Deep neural networks (DNNs) have emerged as a powerful solution this year for addressing longstanding issues in Artificial Intelligence. In this paper, DNNs are applied to three cyber security use cases: Android malware classification, incident detection, and fraud detection. The experiments show that DNNs outperform classical machine learning algorithms due to their ability to extract better features and achieve higher accuracy. The best accuracy obtained by DNNs and XGBoost are 0.940 and 0.741 for Android malware classification, 1.00 and 0.997 for incident detection, and 0.972 and 0.916 for fraud detection, respectively. In the era of technical modernization, new opportunities have emerged alongside threats to the economy. Hacking has become common practice for stealing data, emphasizing the need for efficient fraud detection systems. Cyber security is crucial for protecting systems, networks, and data in the cyberspace, with malware posing a significant threat due to their malicious activities. Malware is a significant security threat in cyberspace, with antivirus and blacklists being ineffective against new malware types. Deep learning approaches, specifically deep neural networks (DNNs), are being evaluated for cyber security use cases such as Android malware classification, incident detection, and fraud detection. This paper evaluates the effectiveness of deep neural networks (DNNs) for cyber security use cases, including Android malware classification, incident detection, and fraud detection. It discusses related work, background knowledge of DNNs, proposed methodology, and results. Static and dynamic analysis are commonly used approaches in Android malware detection, with a preference for static analysis in Android devices. In Android malware detection, static analysis is preferred for its advantages such as low computational cost and less resource utilization. Dynamic analysis, on the other hand, can detect metamorphic and polymorphic malwares. Traditional machine learning classifiers showed good performance using a combination of API calls and permission features. MalDozer, a system using deep learning with sequences of API calls, has performed well in detecting and classifying Android malware. BID4 proposed MalDozer, a system using deep learning with sequences of API calls to detect and classify Android malware. BID5 briefly discussed privacy and security issues in cloud computing, categorizing them into five major categories. BID6 proposed machine learning based anomaly detection on different layers, while BID7 discussed creating intrusion detection for cloud infrastructure. BID8 addressed security problems in the cloud and proposed an incident detection system. BID9 conducted a comparative study of traditional machine learning classifiers for financial fraud detection, and BID10 discussed the applicability of data mining approaches for the same purpose. In BID9, a comparative study of traditional machine learning classifiers for financial fraud detection was conducted. BID10 discussed the applicability of data mining approaches for the same purpose. Deep learning, a sub model of machine learning, is widely used in cyber security use cases. This paper proposes a unique DNN architecture for efficient use in various cyber security scenarios, discussing the concepts and techniques behind training DNNs. Artificial neural networks (ANNs) are represented as a directed graph with artificial neurons connected by edges, inspired by biological neural networks. A feed forward network (FFN) is a type of ANNs where units are connected in a single direction without forming loops. A feed forward network (FFN) is a type of artificial neural network (ANN) consisting of connected units in a single direction without loops. Multi-layer perceptron (MLP) is a subset of FFN with 3 or more layers, including input, hidden, and output layers. The number of hidden layers can be increased for complex data, forming an acyclic graph that passes information forward. MLP can be mathematically formulated for computation of hidden layers. The computation of hidden layers in a feed forward network (FFN) with multiple layers can be defined mathematically. Rectified linear units (ReLU) are efficient for training deep learning architectures, speeding up the process compared to traditional activation functions. TensorFlow and Keras are used as software frameworks, with GPU enabled TensorFlow for faster computations. Task 1 involves Android Malware Classification using a dataset of unique API information from APK files collected from the Opera Mobile Store. Task 2 focuses on Incident Detection with a dataset of operational log files from Unified Threat Management of UniteCloud. Task 3 (Fraud Detection): Anonymised data unified using HCRUD approach for fraud detection. Detailed statistics of Task 1, Task 2, and Task 3 datasets are reported in TAB0. Highest 10-fold cross validation accuracy achieved with learning rate of 0.1 after running experiments till 500 epochs. In Task 2, experiments were conducted to find the optimal learning rate, with the highest accuracy achieved at 0.1 after 500 epochs. Accuracy decreased at 0.2 but improved at 0.35, 0.45, and 0.5. The decision to stick with 0.1 was based on performance and computational factors. Various network topologies were tested, with most architectures learning input data patterns within 600 epochs. The experiments involved testing different network topologies with 2 trials each, running for 500 epochs. Most architectures learned normal category patterns within 600 epochs, but the number of epochs for malicious data varied. Complex networks needed more iterations for accuracy. The best performing network topologies were identified for each task, with 4 layer DNNs performing well for Task 2 and Task 3, and 5 layer DNNs for Task 1. The chosen architecture had an input layer with 4896 neurons for Task 1, 9 neurons for Task 2, and 12 neurons for Task 3, and an output layer with 2 neurons for Task 1, 3 neurons for Task 2, and 2 neurons for Task 3. The proposed deep neural network architecture consists of an input layer with different numbers of neurons for each task, fully-connected layers, batch normalization layers, and dropout layers. The fully-connected layers map the data into high dimensions for accurate output determination using ReLU as the activation function. Batch normalization and dropout are used to prevent overfitting and speed up model training. The deep neural network architecture includes fully-connected layers with ReLU activation function for accurate output. Batch normalization and dropout layers are used to prevent overfitting and speed up model training. Classification involves final fully connected layers with sigmoid activation for Task 1 and Task 2, and softmax for Task 3. Prediction loss is estimated using binary cross entropy for Task 1 and Task 2, and categorical cross entropy for Task 3. The deep neural network model is evaluated against classical machine learning classifiers on three cyber security use cases: identifying Android malware, incident detection on UniteCloud, and fraud detection in financial transactions. The model uses SGD optimizer to minimize loss and passes inputs to hidden layers before outputting results. XGBoost is based on the original Gradient Boosting model proposed in the paper. XGBoost is a model used for supervised learning problems with multiple features to predict a target variable. It is based on the original Gradient Boosting model and is used for classification tasks. The model achieved high accuracy in tasks 1, 2, and 3 using Random Forest classifier with Python scikit-learn. The proposed method using Random Forest classifier with Python scikit-learn achieved high accuracy in tasks 1, 2, and 3 of CDMC 2017. The performance of deep neural networks (DNNs) for cyber security use cases was evaluated, showing good results compared to classical machine learning classifiers. DNNs can be further improved by adding hidden layers to the architecture. The performance of DNNs surpasses classical machine learning classifiers in all use cases and can be enhanced by adding more layers to the existing architecture, indicating a promising direction for future work."
}