{
    "title": "rkeeQmm0cX",
    "content": "Deep neural networks (DNNs) have emerged as a powerful solution this year for addressing longstanding issues in Artificial Intelligence. In this paper, DNNs are applied to three cyber security use cases: Android malware classification, incident detection, and fraud detection using real data sets from Cybersecurity Data Mining Competition (CDMC) 2017. Efficient network architectures for DNNs are chosen through experiments on network parameters and structures, running up to 1000 epochs with learning rates in the range [0.01-0.5]. The experiments involved efficient configurations of DNNs run for up to 1000 epochs with learning rates between 0.01-0.5. DNNs outperformed classical machine learning algorithms in cyber security use cases by extracting better features and achieving higher accuracy. The best accuracy for DNNs and XGBoost was 0.940 and 0.741 for Android malware classification, 1.00 and 0.997 for incident detection, and 0.972 and 0.916 for fraud detection respectively. The accuracy of DNNs varied within a small range. In the era of technical modernization, new opportunities and potential resources have emerged, but they also bring threats to the economy. Hacking has become common in organizations for data theft, emphasizing the need for efficient fraud detection systems. Cyber security plays a crucial role in preventing fraudulent activities. Malware, a significant security threat on the Internet, indicates malicious activity in files or programs, causing harm to systems. Antivirus and blacklists are commonly used to combat malware, but are not always effective. Machine learning algorithms, particularly deep learning approaches, have shown remarkable performance in cyber security, especially in detecting new malware created using advanced techniques like polymorphic and metamorphic coding. Deep learning approaches have shown remarkable performance in various AI challenges. This paper evaluates the effectiveness of deep neural networks for cyber security use cases such as Android malware classification, incident detection, and fraud detection. Sections II to VI discuss related work, background knowledge of DNNs, methodology, data set description, results, and conclusion. The proposed methodology includes a description of the data set. Results are displayed in Section V, and the conclusion is in Section VI. The related work for cyber security use cases includes Android malware classification, incident detection, and fraud detection. Static and dynamic analysis are commonly used approaches in Android malware detection. Static analysis involves collecting android permissions by unpacking or disassembling the app, while dynamic analysis focuses on run-time execution characteristics. Commercial systems often use a combination of both static and dynamic analysis for Android devices. In Android malware detection, static analysis is preferred for its advantages such as low resource utilization and less time consumption. Dynamic analysis can detect metamorphic and polymorphic malwares. BID3 evaluated traditional machine learning classifiers using permission, API calls, and a combination of both as features from 2510 APK files. BID4 proposed MalDozer, a system using sequences of API calls with deep learning to detect and classify Android malware. It performed well on private and public datasets like Malgenome and Drebin. BID5 briefly discussed privacy and security issues in cloud computing, addressing 28 different concerns. The privacy and security of cloud computing were discussed by BID5, addressing 28 security issues categorized into five major categories. BID6 proposed machine learning-based anomaly detection for different layers, while BID7 discussed creating intrusion detection for cloud infrastructure. BID8 focused on security problems in the cloud and proposed an incident detection system. In BID8, security issues in the cloud were addressed, proposing an incident detection system. BID9 conducted a comparative study on machine learning classifiers for financial fraud detection. BID10 discussed data mining approaches for fraud detection. Deep learning, a sub-model of machine learning, has been widely used for cybersecurity purposes. Additionally, a unique DNN architecture was proposed for efficient use in various applications. The paper proposes a unique DNN architecture for various cyber security use cases, discussing the concepts of deep neural networks and promising training techniques. Artificial neural networks represent a directed graph with artificial neurons connected by edges, inspired by biological neural networks. A feed forward network is a type of ANN. A feed forward network (FFN) is a type of artificial neural network (ANN) where units are connected in a single direction without forming cycles. Multi-layer perceptron (MLP) is a subset of FFN with 3 or more layers - input, hidden, and output. The number of hidden layers can be increased for complex data, with the parameterization of the hidden layer count. A Multi-layer perceptron (MLP) is a subset of a feed forward network (FFN) with hidden and output layers. The number of hidden layers can be increased for complex data, with the parameterization of the hidden layer count. The units form an acyclic graph passing information forward without depending on past input. The computation of each hidden layer is mathematically formulated in the network. The computation of each hidden layer in a Multi-layer perceptron (MLP) can be defined mathematically. Rectified linear units (ReLU) are more efficient for training data compared to traditional activation functions like logistic sigmoid and hyperbolic tangent. The text chunk discusses the advantages of using Rectified Linear Units (ReLU) as an activation function in deep learning architectures, specifically in conjunction with TensorFlow and Keras. It mentions the use of GPU for faster computations and training using the back propagation through time (BPTT) technique. Additionally, it references a specific task related to Android Malware Classification with a dataset containing unique API information from APK files. The data set for Android Malware Classification contains 37,107 unique API information from 61,730 APK files collected from the Opera Mobile Store in 2014. APIs are related to permissions in AndroidManifest.xml file of APK. The dataset for Android Malware Classification includes API information from APK files collected from the Opera Mobile Store in 2014. Permissions in AndroidManifest.xml file are grouped into Normal, Dangerous, Signature, and Signature Or System. The dataset for Incident Detection contains operational log files from Unified Threat Management (UTM) of UniteCloud BID25, a cloud infrastructure for e-learning and e-research services in New Zealand. Each log file sample includes operational measurements from 9 different sensors in the UTM system. The UniteCloud server runs a real-time system with log files containing nine features from sensors in the UTM system. The dataset for Fraud Detection is anonymized and unified using the HCRUD approach. Experiments were conducted to find the optimal learning rate for the tasks. The experiments conducted on the Task 2 and Task 3 data sets aimed to find the optimal learning rate. After running trials up to 500 epochs with learning rates ranging from 0.01 to 0.5, the highest accuracy was achieved at a learning rate of 0.1. Accuracy decreased at 0.2 but peaked again at 0.35, 0.45, and 0.45. It was suggested that running experiments up to 1000 epochs could further enhance accuracy. Despite testing more complex architectures that performed poorly within 500 epochs, the decision was made to stick with a learning rate of 0.1 for future experiments. After testing various network topologies, including DNNs with 1 to 5 layers, it was found that most architectures could learn normal category patterns within 600 epochs. A learning rate of 0.1 was chosen for future experiments based on factors like training time and computational cost. The deep learning architectures typically learn normal category patterns within 600 epochs, with varying requirements for malicious category data. Complex networks need more iterations for accuracy. Best performing network topology was determined for each use case, with 5 layer DNNs chosen for further experiments. 10-fold cross validation accuracy for all cases is shown in TAB0. The proposed DNN architecture, Deep-Net, consists of an input layer with 4896 neurons for Task 1, 9 neurons for Task 2, and 12 neurons for Task 3. It also includes 5 hidden layers and an output layer with 2 neurons for Task 1, 3 neurons for Task 2, and 2 neurons for Task 3. The network is fully connected from input to hidden layer and hidden to output layer. Training details and configuration are provided in TAB0. The proposed DNN architecture, Deep-Net, includes fully-connected layers, batch normalization layers, and dropout layers. The fully-connected layers map data into high dimensions for accurate output determination using ReLU as the activation function. The Deep-Net DNN architecture utilizes ReLU as a non-linear activation function and includes Batch Normalization and Regularization techniques to prevent overfitting and speed up model training. Dropout and Batch Normalization are used between fully-connected layers to improve performance. In alternative architectures for Task 1, regularization is necessary to prevent overfitting even with a large number of training samples. Classification is done using sigmoid activation function for Task 1 and softmax for Task 2. Regularization is important for preventing overfitting in deep neural network architectures. For classification, the final fully connected layer uses sigmoid activation for Task 1 and softmax for Task 2. The prediction loss is estimated using binary cross entropy for Task 1 and Task 2, and categorical cross entropy for Task 3. The prediction loss for Task 3 is estimated using categorical-cross entropy where ed is true probability distribution, pd is predicted probability distribution. DNNs model is evaluated against classical machine learning classifier on three cyber security use cases: identifying Android malware, incident detection on UniteCloud, and fraud detection in financial transactions. The second use case involves incident detection on UniteCloud using UTM operations, while the third use case focuses on fraud detection in financial transactions. Input matrices of specific shapes are passed to DNNs with multiple hidden layers. XGBoost, based on Gradient Boosting, is utilized for supervised learning tasks (Task1, Task2, and Task3). XGBoost is used for supervised learning tasks (Task1, Task2, and Task3) with training data to predict a target variable. \"multi:softmax\" is used for classification, with a \"max depth\" of 20 for the tree. 10 fold cross validation is performed for training accuracy. Data is loaded using Pandas, with \"NaN\" values replaced with 0. Task 1 involves a term-document matrix representation with vocabulary built using API indication numbers. Scikit-learn count vectorizer is used. The data is represented as a term-document matrix using scikit-learn BID11 count vectorizer. The XG Booster is used for prediction. The winner of CDMC 2017 achieved high accuracy on Task 1, Task 2, and Task 3 with Random Forest classifier. The proposed method performed well on Task 2 compared to the winner. DNNs had slightly lower accuracy than the winner. The performance of deep neural networks (DNNs) for cyber security applications, including Android malware classification, incident detection, and fraud detection, was evaluated. DNNs showed good performance compared to classical machine learning classifiers, with the potential for further enhancement by adding hidden layers to the architecture. Deep neural networks (DNNs) outperform classical machine learning classifiers in various cyber security applications. Adding more layers to the existing architecture can further improve DNN performance, indicating a direction for future work."
}