{
    "title": "rkeeQmm0cX",
    "content": "Deep neural networks (DNNs) have emerged as a powerful solution this year for addressing longstanding issues in Artificial Intelligence. In this paper, DNNs are applied to three cyber security use cases: Android malware classification, incident detection, and fraud detection. The experiments show that DNNs outperform classical machine learning algorithms due to their ability to extract better features and achieve higher accuracy. The best accuracy obtained by DNNs and XGBoost are 0.940 and 0.741 for Android malware classification, 1.00 and 0.997 for incident detection, and 0.972 and 0.916 for fraud detection, respectively. In the era of technical modernization, new opportunities and potential resources have emerged, but they also bring threats to the economy. Cyber security is crucial for protecting systems, networks, and data in the cyberspace. Malware poses a significant security threat on the Internet, indicating malicious activity in files or programs. Efficient systems are needed to detect and prevent fraudulent activities, as hacking has become a common practice for stealing data and information. Malware, a significant security threat on the Internet, indicates malicious activity in files or programs. Antivirus and blacklists are used as primary weapons against malwares, but they are not effective in detecting new malwares created using advanced techniques. Machine learning algorithms, particularly deep learning approaches, have shown remarkable performance in cyber security challenges. The new malware is created using advanced techniques like polymorphic, metamorphic, domain flux, and IP flux. Machine learning algorithms, especially deep learning approaches, have been effective in cyber security challenges. This paper evaluates the effectiveness of deep neural networks for Android malware classification, incident detection, and fraud detection. Static and dynamic analysis are commonly used in Android malware detection. The conclusion in Section VI discusses related work for cyber security use cases, focusing on Android malware classification, incident detection, and fraud detection. Static and dynamic analysis are commonly used approaches in Android malware detection. Static analysis involves collecting android permissions through unpacking or disassembling the app, while dynamic analysis looks at runtime execution characteristics. Commercial systems often use a combination of both methods. Static analysis is preferred in Android devices due to its advantages such as low computational cost and resource utilization, while dynamic analysis can detect metamorphic and polymorphic malwares. Traditional machine learning classifiers have shown good performance in android malware detection using features like permissions, API calls, and a combination of both. BID3 evaluated traditional machine learning classifiers for android malware detection using permission, API calls, and a combination of both as features. Performance was good with the combination of API calls and permission feature set. BID4 proposed MalDozer using deep learning to detect and classify Android malware. BID5 briefly discussed privacy and security issues in cloud computing. BID6 proposed machine learning based anomaly detection on different layers. BID7 discussed creating intrusion detection for cloud infrastructure. In BID8, security problems in cloud were discussed, and an incident detection system was proposed. BID9 conducted a comparative study of traditional machine learning classifiers for identifying financial fraud. BID10 discussed data mining approaches for financial fraud detection. Deep learning, a sub model of machine learning, has been widely used in cyber security, with a unique DNN architecture proposed for various cyber security use cases. The paper proposes a unique DNN architecture for various cyber security use cases, discussing the concepts of deep neural networks (DNNs) and promising techniques for training them. Artificial neural networks (ANNs) are represented as a directed graph with artificial neurons connected by edges, inspired by biological neural networks. A feed forward network (FFN) is a simple algorithm where units are connected in a single direction without forming cycles. Multi-layer perceptron (MLP) is a subset of FFN with input, hidden, and output layers. The forward network (FFN) is a simple algorithm with units connected in a single direction without cycles. Multi-layer perceptron (MLP) is a subset of FFN with input, hidden, and output layers. The number of hidden layers in MLP can be increased for complex data, forming an acyclic graph passing information forward. MLP can be represented as O:Rp\u00d7Rq, with hidden layer computation mathematically formulated. Rectified linear units (ReLU) are efficient for accelerating network performance. The computation of hidden layers in a neural network can be defined mathematically. Rectified linear units (ReLU) are efficient for training with large amounts of data. TensorFlow and Keras are used as software frameworks, with GPU acceleration for deep learning architectures. Training is done using back propagation through time (BPTT) technique. Task 1 involves classifying Android malware using a dataset of unique API information from APK files collected from the Opera Mobile Store. Task 2 focuses on incident detection using operational log files from Unified Threat Management of UniteCloud. Task 3 involves fraud detection using anonymized data unified with a rule-based approach. The dataset details are reported in TAB0. The dataset for fraud detection was anonymized using the HCRUD approach. Experimentation with learning rates showed the highest accuracy at 0.1, with a decrease at 0.2 and peaks at 0.35 and 0.45. Using a learning rate of 0.1 for further experiments, different network topologies were tested to find the optimal structure. After experimenting with learning rates, a learning rate of 0.1 was chosen for further experiments to optimize network structures. Various DNN architectures were tested, including 1 to 5 layer networks, with multiple trials conducted. Most architectures learned normal data patterns within 600 epochs, while malicious data required more iterations for accuracy. The best performing networks were identified for each task, with 4 layer DNNs excelling in Task 2 and Task 3, and 5 layer DNNs performing well in Task 1. The 5 layer DNNs network was selected for future experiments. Cross-validation accuracy for each network topology is presented in TAB0. The 5 layer DNNs network outperformed the 4 layer DNNs in Task 1, leading to its selection for future experiments. The proposed DNN architecture includes an input layer with varying neuron counts for each task, 5 hidden layers, and an output layer. The network is trained using backpropagation and includes fully-connected, batch normalization, and dropout layers. The proposed deep neural network includes fully-connected, batch normalization, and dropout layers to prevent overfitting and speed up model training. Fully-connected layers map data into high dimensions for accurate output determination. The final fully connected layer uses sigmoid activation for Task 1 and Task 2, and softmax for Task 3 classification. In alternative architectures for Task 1, deep networks risk overfitting training data without regularization even with large samples. The final fully connected layer uses sigmoid for Task 1 and Task 2, softmax for Task 3 classification. It assigns benign (0) or malicious (1) labels and provides probability scores. Prediction loss is calculated using binary cross entropy for Task 1 and Task 2, categorical cross entropy for Task 3. SGD optimizer is used to minimize loss. The DNN model is compared to classical machine learning classifiers in three cyber security use cases. The DNN model uses sgd optimizer to minimize loss in binary-cross entropy and categorical-cross entropy. It is evaluated against classical machine learning classifiers in three cyber security use cases: identifying Android malware, incident detection on UniteCloud, and fraud detection in financial transactions. XGBoost is utilized for supervised learning problems with multiple features to predict target variables using \"multi:softmax\" classification. XGBoost, based on Gradient Boosting, is used for supervised learning tasks (Task1, Task2, Task3) with training data to predict target variables. \"multi:softmax\" classification is employed, with a tree depth of 20 and 10-fold cross validation for training accuracy. Data is loaded using Pandas, NaN values are replaced with 0. Task 1 involves a term-document matrix representation using count vectorizer. The proposed method outperforms the winner of CDMC 2017 on Task 2, achieving high accuracies on all tasks with Random Forest classifier. The proposed method achieved high accuracies on Task 1, Task 2, and Task 3 using Random Forest classifier in CDMC 2017. DNNs showed good performance in cyber security use cases compared to classical machine learning classifiers. The method can automatically obtain the best features and improve DNN results by adding hidden layers. The DNNs outperformed classical machine learning classifiers in various use cases, with the potential for further improvement by adding more layers to the existing architecture. This direction is suggested for future work."
}