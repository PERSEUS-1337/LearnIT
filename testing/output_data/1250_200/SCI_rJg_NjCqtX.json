{
    "title": "rJg_NjCqtX",
    "content": "Chemical information extraction involves converting chemical knowledge in text into a chemical database by identifying and standardizing compound names. A framework using spelling error correction, tokenization, and neural models was proposed to standardize non-systematic names to systematic names. The framework achieved a 54.04% accuracy on the test dataset, a significant improvement. There are over 100 million named chemical substances worldwide, each assigned systematic names based on their structures. In order to uniquely identify chemical substances, systematic names are assigned based on their structures by the International Union of Pure and Applied Chemistry (IUPAC). However, besides systematic names, chemical substances may also have common names for simplicity or proprietary names in the industry. For example, sucrose is commonly known as sugar, while Aspirin is a proprietary name for 2-Acetoxybenzoic acid. Chemical information extraction involves extracting useful chemical knowledge from text and converting it into databases, relying on standard chemical names. Various chemical databases like PubChem and SciFinder store information such as chemical names, structures, and formulas. Extracting chemical information from papers to update these databases is an ongoing task. Using systematic names makes it easier to generate other representations like SMILES and InCHI for structural formulas. Systems are available for automatically converting systematic names to SMILES strings with high accuracy. In chemical information extraction, systematic names are preferred for generating structural formulas like SMILES and InCHI. Errors in non-systematic names can be categorized into spelling, ordering, common name, and synonym errors. Synonym errors, where words differ but share the same root, are the most common. For example, Acetylsalicylic Acid is a synonym for 2-(Acetyloxy)benzoic Acid. Based on the categorization of errors in non-systematic chemical names, a framework has been proposed to automatically convert them to systematic names. The framework includes steps such as spelling error correction, tokenization, and using a sequence to sequence model to fix ordering and synonym errors. This task is challenging due to the presence of mixed error types in a single name. Only a few works, such as ChemHits, have been done in the field of chemical name standardization. The BID2 work developed an online system called ChemHits for standardizing chemical names using transformation rules and queries to online databases. Unlike ChemHits, they used a sequence to sequence model for their task, achieving 54.04% accuracy without external chemical knowledge. Their approach will focus on a corpus of chemical names from high-impact Chemical Journals. In a corpus of chemical names from high-impact Chemical Journals, a total of 384816 data pairs were collected and checked manually. The Levenshtein distance between non-systematic and systematic names was analyzed. The experiment used 80% training data, 19% test data, and 1% development data. The goal was to correct spelling errors by separating chemical names into elemental words and creating vocabularies of systematic elemental words. The text discusses the process of correcting spelling errors in chemical names by separating them into elemental words and creating vocabularies of systematic and non-systematic elemental words. This is done by building vocabularies from the dataset and using a BK-Tree structure for efficient correction search. The BK-Tree structure is defined with a root node and subtrees based on Levenshtein distance. It efficiently corrects spelling errors in non-systematic names and allows for easy insertion of new data. By inputting elemental words, corrections can be made and combined to form the full name, aiding in training sequence to sequence models. The BK-Tree structure corrects spelling errors in non-systematic names and aids in training sequence to sequence models by reducing noise in elemental words. Byte Pair Encoding (BPE) is used for tokenization before applying the sequence-to-sequence model. The text discusses using Byte Pair Encoding (BPE) for tokenization before training a sequence-to-sequence model. BPE helps with out-of-vocabulary problems and can tokenize chemical names into meaningful subwords. The sequence-to-sequence model consists of two recurrent neural networks and is adapted from OpenNMT with modifications. In this work, an existing implementation of OpenNMT BID5 was adapted with modifications. The sequence-to-sequence model includes an encoder that generates a context vector H from source sequences and a decoder that uses this vector to generate target sequences. The encoder uses a multilayer bidirectional LSTM (BiLSTM) to process sequences forward and backward, resulting in a context vector H. The decoder calculates the probability of output sequences and for a single token. The only parameter in the spelling error correction stage is the threshold of the BK-Tree. Several thresholds were tested in the experiment. The spelling error correction stage involves testing different threshold values for the BK-Tree. At the BPE stage, various merge operation values were experimented with. The sequence-to-sequence model parameters include word embeddings and hidden states dimensions of 500, vocabulary size determined by basic characters and merge operations, 2 layers in encoder and decoder, and training with SGD using cross-entropy loss function. Initial learning rate is 1.0 with decay applied every epoch. The weights are initialized with a random uniform distribution. The learning rate starts at 1.0 and decays by a factor of 0.5 every epoch after epoch 8 or when perplexity stops decreasing on the validation set. Dropout rate is set at 0.3 and the model is trained for 15 epochs with a beam size of 5 for decoding. An experiment is conducted using Statistical Machine Translation (SMT) model with specific parameters. Data augmentation is used to handle noisy data, specifically spelling errors, by inserting errors into non-systematic names with a probability of 0.025. In the experiment, errors are inserted into names with a probability of 0.025 using four methods. Accuracy and BLEU score are used to measure standardization quality. The best performance is achieved by combining spelling error correction, BPE tokenization, and sequence to sequence model. The framework outperforms the SMT model and the ChemHits system. The experiment showed that combining spelling error correction, BPE tokenization, and sequence to sequence model outperformed the SMT model and the ChemHits system. Results indicated that BPE with 5000 merge operations was the best parameter value. Spelling error correction and data augmentation were beneficial, with spelling error correction being more effective. Overcorrection may occur with large Levenshtein distance thresholds. The sequence to sequence model successfully standardized non-systematic names by fixing non-alphabet spelling errors and correcting synonym errors. The sequence to sequence model successfully standardized non-systematic chemical names by fixing non-alphabet spelling errors and correcting synonym errors. Examples include correcting the order of chemical names like ethane,1,2-dichloro to 1,2-dichloroethane and standardizing proprietary names like P-anise alcohol to its systematic name. Visualization of attentions in an example showed how the model can find relations between chemical names and place modifiers correctly. The system successfully standardized non-systematic chemical names by fixing spelling errors and synonym errors. It performed well on spelling errors but struggled with common errors. Out of 100 failed attempts, some were nearly correct, some were totally incorrect, and others were partially correct. The system standardized non-systematic chemical names by fixing spelling and synonym errors. It struggled with common errors, with nearly half not successfully standardized. The framework performed best for names of length 20-40 but poorly for names over 60 characters. The model does not consider chemical rules, leading to some names not following rules. Examples of failed attempts include 5-bromo-2-(chlorosulfanyl)toluene and 4-bromo-2-methylbenzene-1-sulfonyl chloride. The framework proposed in this work aims to automatically convert non-systematic chemical names to systematic names using spelling error correction, tokenization, and a sequence to sequence model. It achieved an accuracy of 54.04% on the dataset, outperforming previous rule-based systems. The framework is fully data-driven and independent of external chemical knowledge, opening up new possibilities for chemical information extraction."
}