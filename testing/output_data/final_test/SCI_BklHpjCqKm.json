{
    "title": "BklHpjCqKm",
    "content": "Deep learning has achieved remarkable results with large amounts of data, but for real-world applications, additional prior knowledge is often needed. Incorporating physical insight has led to a new deep learning approach called Deep Lagrangian Networks (DeLaN), which efficiently learns the equations of motion of a mechanical system while ensuring physical plausibility. The proposed DeLaN network excels in robot tracking control, outperforming previous model learning approaches in learning speed and robust extrapolation to novel trajectories. Deep learning, while effective with large data, requires additional prior knowledge for real-world applications. Incorporating physical insight has led to a novel deep model learning approach that extrapolates well with fewer samples. The novel Deep Lagrangian Networks (DeLaN) is a deep learning approach that efficiently learns the equations of motion of a mechanical system, particularly excelling in robot tracking control. It outperforms previous model learning approaches in learning speed and robust extrapolation to novel trajectories, showcasing improved performance and real-time online learning capabilities. Despite the rapid progress of deep learning in various fields, physically embodied systems have lagged behind, highlighting the importance of learning physical models for control applications. Learning physical models is crucial for controlling embodied systems, planning future actions, and reasoning about prior actions. Engineers often opt for classical off-the-shelf modeling for its physical plausibility, despite the high cost and effort involved. To address this, a model combining deep learning and physics is proposed to ensure physically plausible representations and efficient computation of derivatives for encoding differential equations describing physical processes. The text suggests encoding physics prior in the network topology to improve training sample information content, regularize training, and ensure physical plausibility. It focuses on learning models of mechanical systems using the Euler-Lagrange equation. The contribution is the development of Deep Lagrangian Networks (DeLaN) for training. The text introduces Deep Lagrangian Networks (DeLaN) for training models of mechanical systems using the Euler-Lagrange equation. DeLaN enforces physics on a generic deep network, allowing for online learning of dynamics models with control performance demonstrated on simulated and physical robots. DeLaN is a model that outperforms existing approaches in control performance and extrapolates to new trajectories. The model is trained online from random initialization and relies on system dynamics for model-based control. The approach is detailed in sections 2 to 5, showcasing its superior learning performance on simulated and physical robots. The text discusses the use of forward and inverse models in control systems, derived from physics or learned from data using machine learning techniques. Physics models require precise knowledge of physical properties, while machine learning techniques like Linear Regression, Gaussian Mixture Regression, Gaussian Process Regression, Support Vector Regression, and neural networks are used to fit the models to training data. The text discusses incorporating prior knowledge into learning models for robot manipulators using neural networks. Some approaches use the graph representation of kinematic structure as input, while others derive physics features from joint measurements for model learning. DeLaN offers a structured learning approach for robot manipulators that ensures physical plausibility and a general formulation, allowing it to learn dynamics for any kinematic structure without prior knowledge. This contrasts with traditional approaches like NewtonEuler, which are specific to kinematic structures. The combination of differential equations and Neural Networks has been explored in literature, with a focus on using machine learning to overcome limitations of PDE solvers. Different approaches have been proposed, such as the Deep Galerkin method for solving high-dimensional PDEs. Some research aims to reduce sample complexity by structuring the learning problem based on specific differential equations. This paper follows a similar motivation but takes a different approach. The DeLaN approach uses the structure of differential equations to infer equations of motion implicitly, with efficient computation for control loops using different encoding of partial derivatives. It applies Lagrangian Mechanics with generalized coordinates to describe mechanical systems. The Lagrangian L is a function of generalized coordinates q that describes the dynamics of a system. It is chosen to be T - V, where T is kinetic energy and V is potential energy. The Euler-Lagrange equation is obtained by applying the calculus of variations, with non-conservative forces described by generalized forces \u03c4. Substituting L and dV/dq = g(q) into the equation yields a second-order ODE. The second-order ODE described by DISPLAYFORM2 3 can be used to model multi-particle mechanical systems with holonomic constraints. Various applications include deriving equations of motion for coupled pendulums, robotic manipulators, parallel robots, and legged robots. Traditional engineering approaches estimate H(q) and g(q) from measured parameters, while DeLaN incorporates the ODE structure into model learning. DeLaN bridges the gap by incorporating the ODE structure into learning, approximating the inverse model using feed-forward networks. The parameters are learned by minimizing the violation of physical laws described by Lagrangian Mechanics. The optimization problem is defined with an inverse model and differentiable loss function. The learned model properties do not depend on q or q. The obtained model can be reformulated and used as a forward model, with a penalty term added to mitigate ill-posedness in the optimization problem. The Euler-Lagrange equation is invariant to linear transformation, and the Lagrangian can be adjusted to solve the equation. The L2-norm of network weights, denoted as \u2126, poses challenges in optimization due to positive definite constraints and difficulties in computing certain derivatives analytically. A network structure fulfilling these constraints is introduced, enabling analytical computation of key derivatives for efficient parameter training. The network architecture introduced enables efficient computation of key derivatives for parameter training, including second order derivatives needed for end-to-end training. The derivatives are required for computing the control signal within a real-time control loop and must be available within the forward pass. Automatic differentiation is used to compute the second order derivatives analytically. The network architecture allows for efficient computation of key derivatives for parameter training, including second-order derivatives needed for end-to-end training. Automatic differentiation is used to compute these derivatives analytically, enabling the control signal to be computed in real-time within a control loop. The derivatives are necessary for the forward pass of the network. The chain rule allows for closed-form computation of all derivatives within the network architecture. The Lagrangian layer, described by DISPLAYFORM0, enables efficient computation of derivatives required for real-time control loop operations. Additional reshaping operations compute dL/dt and \u2202L/\u2202q i. The proposed DeLaN network topology is applied to model-based control for a simulated 2-dof robot and the physical 7-dof robot Barrett WAM. DeLaN's performance is evaluated using tracking error on train and test trajectories, compared to a learned and analytic model. The models are randomly initialized and learn online during the experiment, executing multiple desired trajectories with specified joint positions, velocities, and accelerations. The control signal for the robot is generated using a non-linear feedforward controller with specified joint positions, velocities, and accelerations. The control law includes controller gains and desired joint states, updated at a frequency of 200Hz. Feed-forward torques are computed online with a computation time limit of 1/200s. Tracking performance is evaluated using mean squared error on reference trajectories. The first data set contains single stroke characters while the second data set uses cosine curves in joint space. Characters are rescaled to comply with robot kinematics, with smooth and sharp turns. DeLaN performance is compared to analytic inverse dynamics model, FF-NN, and PD-Controller. Torque is computed using Recursive Newton-Euler algorithm for analytic models. The system uses PyBullet for implementations, deep networks with ReLu nonlinearities learn system dynamics online from random initialization. Training samples with joint states and torques are read from the control loop. The data set was created by BID45 and training runs in a separate process on the same machine. The 2-dof robot simulates character and cosine trajectories using PyBullet. DeLaN is capable of learning the physical model using a proposed network topology trained with standard end-to-end optimization. It obtains a lower test MSE compared to FF-NN for different training set sizes, showing its effectiveness in disambiguating inertial, Coriolis, and gravitational forces. DeLaN outperforms FF-NN in test MSE, especially with reduced training set sizes, showcasing its sample complexity and extrapolation capabilities. Results are averaged over multiple seeds and focus on new trajectories, demonstrating DeLaN's ability to execute all 20 characters when trained on 8 random characters. DeLaN outperforms FF-NN in tracking error, showing lower sample complexity and better extrapolation capabilities. FF-NN struggles with increased velocities as it cannot extrapolate to unseen trajectories, unlike DeLaN. DeLaN outperforms FF-NN in tracking error and extrapolation capabilities due to its reduced domain. The Barrett WAM robot with direct cable drives is used for physical experiments to test model learning on complex dynamics. In physical experiments with the Barrett WAM robot, cosine trajectories are focused on for dynamic movements. Dynamics of the four lower joints are learned as they dominate, while upper joints cannot be sufficiently excited. The tracking error on cosine trajectories is shown for simulated and physical Barrett WAM, with the simulation not optimal due to inconsistent parameters. FF-NN performs better on physical training trajectories compared to DeLaN and analytic models. In physical experiments with the Barrett WAM robot, FF-NN outperforms DeLaN and the analytic model in tracking error. DeLaN shows slightly better performance than the analytic model, but is limited by assumptions of Lagrangian Mechanics. Incorporating a physics prior in deep learning with Deep Lagrangian Networks (DeLaN) improves sample complexity and extrapolation. DeLaN can learn system dynamics online with lower sample complexity and better generalization compared to feed-forward neural networks. It can recover inertial, gravitational, and centripetal forces from sensor data, extrapolate to new trajectories and higher velocities. The physics prior in DeLaN enforces physical plausibility and limits representational power, improving performance in complex dynamic systems. In future work, the physics prior in DeLaN should be extended to represent a wider system class by introducing additional non-conservative forces within the Lagrangian. The mean squared error of character trajectories for a two-joint robot is evaluated on training and test sets. DeLaN is compared to other approaches like system identification and feed-forward neural networks. The comparison between the system identification approach (SI) using a feed-forward neural network (FF-NN) and the Recursive Newton Euler algorithm (RNE) shows that SI does not overfit to noise and extrapolates to unseen characters, unlike FF-NN which overfits to training data and does not generalize well. DeLaN regularizes training to prevent overfitting, extrapolates better than FF-NN but not as good as SI. Results on cosine data set show FF-NN performs best on training but deteriorates at higher velocities, while SI extrapolates better. DeLaN performs comparably to SI on training, extrapolates better than FF-NN but not as good as SI. In physical system, SI achieves same performance as RNE, which is significantly worse. The SI approach achieves the same performance as RNE, which is significantly worse compared to DeLaN and the FF-NN. Analytic model and SI extrapolate to higher velocities, while FF-NN's MSE significantly increases. DeLaN extrapolates better than FF-NN but not as good as the analytic model or SI due to model assumptions and noise robustness. SI assumes exact kinematic structure knowledge, which is valid for simulation but not for physical systems with production imperfections and flexible joints. The SI approach performs worse on physical systems due to flexible joints violating the rigid-body assumption. Noise robustness is crucial for physical systems, with gradient-based optimization being more robust than linear regression. Increasing noise levels significantly impact the SI approach's MSE compared to models learned using gradient descent. DeLaN extrapolates better than FF-NN but not as well as SI, showing increased extrapolation compared to FF-NN. DeLaN outperforms the SI approach on physical systems but performs worse than FF-NN due to its prior assumptions hindering performance on direct cable drives."
}