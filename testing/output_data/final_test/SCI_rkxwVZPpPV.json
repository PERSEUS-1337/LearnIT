{
    "title": "rkxwVZPpPV",
    "content": "In this paper, the focus is on situated temporal planning where an agent's plan is influenced by external events, requiring consideration of time passage. Previous research has explored pruning strategies and metareasoning approaches for this complex planning problem. The paper introduces a metareasoning technique called the crude greedy scheme for a situated temporal planner, showing superior performance compared to standard heuristic search. Previous research has focused on minimizing nodes expanded during search, but alternative approaches like selective max and Rational Lazy A\u02da can be used to optimize search time. Motion planning emphasizes the costly nature of edge-cost evaluations, necessitating different search algorithms. In situated temporal planning, different search algorithms are required for evaluations, with a focus on offline planning. Online planning introduces new objectives and scenarios, such as real-time search and deadline-aware search. Situated temporal planning addresses planning online with external temporal constraints like deadlines, emphasizing the need for quick plan execution. Situated temporal planning involves finding a plan quickly for execution with external temporal constraints like deadlines. The first planner used temporal reasoning to estimate timely search nodes for executable solutions. Dual open lists were utilized, but standard heuristic search algorithms were still employed. The recent paper BID19 proposed a rational metareasoning approach for a simplified version of the problem faced by the situated planner, addressing a one-shot version of the metareasoning problem with known distributions. The paper formulated the metareasoning problem as an MDP to maximize the probability of finding a timely plan, showing it is intractable. A greedy decision rule was provided and evaluated empirically with various distributions. The paper explores using metareasoning in a temporal planner by introducing a crude greedy scheme to address the issue of exponential growth in the number of nodes on the open list. This scheme computes a value for each node and expands nodes with a high value first, allowing for the use of a regular open list. The paper introduces a crude greedy scheme in a temporal planner to address the exponential growth of nodes on the open list. This scheme prioritizes nodes with high values, leading to timely solutions without relying on cost-to-go estimates. An empirical evaluation demonstrates its efficacy in solving more problems compared to standard heuristic search methods. The AE2 model, proposed by BID19, simplifies the assumption of n independent processes. Each process attempts to solve the same problem under time constraints, with a single shared computing thread. Process i delivers a solution with probability Pi upon termination, with a deadline for computation completion. The AE2 model assumes n independent processes with each process having a deadline for computation completion. The computation must be completed for any solution to be valid, with uncertainty about the deadline. Process performance is described by CDFs, and if a process terminates before its deadline, it is considered timely. The objective of AE2 is determined by the given variables. The AE2 model involves scheduling processing time over n independent processes to maximize the probability of finding a solution before deadlines. The problem is represented as a Markov decision process with discrete time units. Discretization simplifies handling process termination before time-slices end. The scheduling problem is defined as an MDP with distributions represented by discrete probability functions. The SEA2 model involves assigning time units to processes to meet deadlines in a Markov decision process. The actions involve assigning time units to processes that have not failed yet. The SEA2 model assigns time units to processes in a Markov decision process. Actions are allowed only for processes that have not failed yet. The state variables include wall clock time and cumulative time for each process. Terminal states are SUCCESS and FAIL. Transition distribution is based on the last scheduled process, M i and D i distributions. If all processes fail, transition to FAIL with probability 1; if some process succeeds, transition to SUCCESS with probability 1. Time is incremented by 1, computation time is preserved, and T i is set to F for failed processes. The SEA2 model assigns time units to processes in a Markov decision process. Transition probabilities are based on completion probabilities and deadlines. The reward function is 0 for all states except SUCCESS, which has a reward of 1. Solving the AE2 MDP is NP-hard and possibly even PSPACE-complete. The SEA2 model assigns time units to processes in a Markov decision process, with transition probabilities based on completion probabilities and deadlines. The AE2 MDP is conjectured to be even harder, possibly PSPACE-complete. An optimal schedule can be found in polynomial time under certain restrictions, but these do not strictly hold in practice. Insights from the algorithm for diminishing returns were used to create a greedy scheme that is easy to compute and has shown good empirical results. The SEA2 model assigns time units to processes in a Markov decision process. The most effective computation time for a process is determined by maximizing the sum of utility terms. Allocating time to a process with the best utility per time unit is preferred, considering the delay it may cause to other processes. The BID19 algorithm suggests allocating computation time to processes based on a greedy approach that maximizes a specific formula involving parameters \u03b1 and td. The algorithm aims to balance between prioritizing early deadlines and performance slopes. Using a proxy for the deadline of a process in the algorithm is considered reasonable but may encounter issues with zero or near-zero values. The BID19 algorithm allocates computation time based on a formula involving parameters \u03b1 and td to balance early deadlines and performance slopes. Using a proxy for the deadline may encounter issues with zero or near-zero values. A more disciplined scheme like Qpiq gives preference to processes with early deadlines to avoid potential delays causing them to miss their deadline. It is suggested to measure the \"utility damage\" to a process due to delaying its processing start time. The improved greedy scheme assigns time units to processes based on maximizing a utility function. Integrating this scheme into a planner involves handling issues with obtaining distributions and making decisions about node expansions efficiently. The improved greedy scheme assigns time units to processes based on maximizing a utility function. To make decisions about node expansions efficiently, a crude version of the greedy scheme is considered. This involves estimating the current deadline using the temporal relaxed planning graph (TRPG) and approximating the expected time to return a solution. The relaxed plan is used to estimate the remaining search time by calculating the 'distance from solution' and dividing it by the 'progress rate'. The numerator requires the complete distribution and a crude approximation is suggested if the most effective computation time is greater than a certain threshold. The remaining search time is estimated using the relaxed plan by calculating the 'distance from solution' divided by the 'progress rate'. A crude approximation is suggested if the most effective computation time is greater than a certain threshold. The slack in completing the computation before the deadline is estimated, and the negative logarithm of the probability of not completing in time is assumed to be proportional to the slack. The value of ErD i s keeps decreasing relative to the current time, which may cause the \u03b1 ErDis term to grow without bound. To address this, the denominator is bounded away from 0. The crude greedy approach aims to prevent the \u03b1 ErDis term from growing without bound by bounding the denominator away from 0. This approach has advantages such as not requiring complete distributions D i and M i, and being more computationally efficient. However, it may oversimplify and potentially degrade schedule quality. The original greedy scheme using ErD i s was a first-order approximation, and the crude greedy scheme was evaluated on top of the situated temporal planner of BID2. The planner using the crude greedy scheme with different values of \u03b1 was compared to the original situated temporal planner on instances of the Robocup Logistic League Challenge. Planning time for both planners was shown in TAB1, with 'x' indicating failure to find a plan. The crude greedy scheme outperforms the baseline in solving more problems for any value of \u03b1 in situated temporal planning. This supports a metareasoning approach to search effort allocation and suggests cost-to-go estimates may not be the best heuristic guidance. The proposed metareasoning approach shows better performance than standard heuristic search. The temporal relaxed planning graph BID4 helps estimate remaining planning time and deadlines, indicating cost-to-go estimates may not be crucial for situated temporal planning. The metareasoning scheme provided is a crude version of the greedy scheme of BID19, with approximations to make it faster and utilize readily available information. A more refined and theoretically justified version ('improved greedy') is proposed, but its implementation in the planner is a non-trivial challenge for future research. The improved greedy scheme requires the complete distribution, posing a challenge for its application. The improved greedy metareasoning scheme requires access to complete distributions, which poses a challenge for its implementation. Efforts are being made to replace this distribution with a smaller number of parameters to simplify the process, but this work is still in progress."
}