{
    "title": "ByaQIGg0-",
    "content": "Our novel method utilizes deep neural networks and gradient descent for automated design in complex engineering tasks. By training the neural network to mimic the fitness function and using gradient descent to maximize fitness, we optimized a heat sink and airfoils for maximum lift drag ratio. This approach offers faster evaluation and more efficient design space search compared to other methods, addressing current shortcomings in automated design. Automated design utilizes computer modeling to maximize design objectives, such as creating efficient automotive car styling or magnetic bearings. Examples include the NASA ST5 spacecraft antenna and a compact on-chip wavelength demultiplexer. Despite some successes, challenges remain due to heavy computational requirements for accurate modeling. The challenges in automated design stem from heavy computational requirements and large search spaces. Our approach addresses these issues by using a neural network to efficiently model the physical system and optimize designs with gradients, overcoming current difficulties in automated design. Our method overcomes difficulties in automated design and accelerates optimization by using a neural network to model physical systems efficiently. We test our approach on designing a heat sink and airfoils with high lift drag ratios, highlighting its potential in various engineering fields. In this paper, the focus is on the difficulty of automated design optimization, specifically in airfoil design. The authors emphasize the applicability of their method to various design problems and introduce a new network architecture for predicting steady state fluid flow. This multidisciplinary work presents a novel approach to design optimization using modern network developments. In recent years, there has been significant interest in using neural networks to emulate physics simulations for computational fluid dynamics and other engineering applications. This approach aims to replicate desired physics with less computational resources. The method is tested using automated design of airfoils, with prior work in this area also reviewed. Our method improves on prior work by training a neural network to predict fluid flow from an object's geometry. Automated aerodynamic design has seen substantial progress, particularly in airfoil optimization to minimize drag using gradient-free and gradient-based methods. Airfoil optimization can be achieved through gradient-based methods like steepest descent, which can optimize in fewer steps but require costly gradient computations. Finite difference method is a simple approach but impractical for large search spaces. Our method uses neural networks to emulate simulations for gradient-based optimization. Parameterizing possible geometries is essential for automated airfoil design, with various techniques available. In this work, the parameterization technique from BID13 and BID8 is used to describe the upper and lower surface of an airfoil. An automated design optimization problem aims to maximize a fitness function F(x) in a space X of design parameters. To address the computational demands of evaluating F, a neural network Fnet is used for speed improvements. Fnet is differentiable, allowing for the calculation of gradients to maximize fitness, unlike F which may be computationally infeasible to compute gradients for. In contrast to F, where calculating the gradient may be computationally infeasible, using the gradient allows faster optimization with fewer iterations. An example problem involves optimizing the fin heights on a heat sink, with 15 parameters representing the height of aluminum fins. The goal is to determine the optimal length for each fin to maximize cooling. The method involves using the fin heights as inputs to a neural network to output a single value. Our method involves using the fin heights as inputs to a neural network to determine the temperature at the heat source. To address the limitation of retraining the network for additional constraints, we propose using two networks: P heat net for generating a binary image of the heat sink geometry and S heat net for predicting the heat distribution. This approach allows for optimizing different quantities and overcomes the restriction of a single parameter setup. The parameterization network is used to state heat distribution from the geometry, allowing for quick retraining if needed. The network S heat net predicts steady state heat flow on any geometry, making it versatile for design optimization tasks. Data generation for training is simple by creating parameter vectors and corresponding geometries. The heat sink problem involves creating a dataset of object geometries and their steady state heat distributions. While the network may struggle with changes in the parameter search space, neural networks are adept at generalizing to new examples. The approach of generating simulation data for accurate fluid predictions on vehicle cross sections involves training a network on diverse simulations and fine-tuning it on the desired parameter space. The network needs to predict pressure and velocity fields from an object's geometry, which is challenging due to the global information requirement. Previous methods used fully connected layers, but they are slow and difficult to train. The improved method aims to address these drawbacks. Our improved method for accurate fluid predictions on vehicle cross sections utilizes a U-network architecture with gated residual blocks to provide global information about the boundary when predicting each point of flow. The network is kept all convolutional to preserve spatial information and allow for training on smaller datasets. Gated residual blocks also speed up training significantly. A simple binary representation of geometry is used as input instead of the Signed Distance Function for added simplicity. The steady state heat prediction network follows the same basic architecture. The network architecture for accurate fluid predictions on vehicle cross sections utilizes U-network with gated residual blocks. Parameterization networks are trained with 10,000 examples for each system. Heat sink geometry example can be found in FIG3.4. Parameterization for 2D and 3D airfoils uses 46 parameters. Simulation datasets consist of 5,000, 5,000, and 2,500 training examples for heat sink, 2D fluid, and 3D fluid simulations respectively. The simulations for heat sink, 2D fluid, and 3D fluid used different solvers and optimization methods. The networks were trained with specific learning rates and loss functions, with adjustments made for the flow prediction network. Parameterization networks trained quickly with a constant learning rate. The design parameters are optimized by scaling the gradient with momentum and adding noise to avoid local optima. Different learning rates were used for heat sink and airfoil problems. Scaling input to parameterization network between 0 and 1 prevents parameter values outside the original design space. The optimization task involves scaling input to the parameterization network between 0 and 1, using a hard sigmoid to enforce this. To prevent parameters from leaving the range of -0.5 to 0.5, a small loss is added. The goal is to find fin heights that cool a heat source on an aluminum heat sink placed on a CPU. Placing long fins near the heat source and shorter fins farther away is the intuitive solution. The optimization task involves finding fin heights to cool a heat source on a CPU. After training neural networks, gradient optimization is used on 15 fin heights to minimize temperature at the source. The optimized heat sink design closely resembles intuition, with smooth optimization and minimal noise. Comparison with simulated annealing shows similar results. The optimized heat sink design produced by the neural network closely resembles that produced by simulated annealing, with minute differences in cooling effectiveness. Gradient descent converged in 150 iterations compared to simulated annealing's 800. The model's accuracy in predicting steady state fluid flow and forces on the object will be tested next. The forces on the object are the key values being optimized in predictions. They are calculated from the pressure field using a neural network with a 3 by 3 transpose convolution on the boundary to determine surface normals. Viscous forces are excluded as they are small for thin airfoils. The model accurately predicts forces, showing an increase in accuracy compared to previous models. The flow visualization is sharp without any artifacts. The optimization process and final design are shown in the top plot. The optimization process using gradient descent method for airfoil design is shown, with comparison to simulated annealing. The goal is to maximize lift drag ratio at different angles of attack. The gradient descent method converges faster and finds similar designs. A conventional airfoil creates lift with a curved upper surface. The lift drag ratio is crucial for efficiency, increasing with angle of attack until reaching a maximum value. The optimization process for airfoil design involves calculating gradients at various angles of attack to produce an optimized design. The method is effective in generating expected lift drag ratio curves. The designs were validated using a Lattice Boltzmann solver, showing good performance. Further investigation into the fitness space was done by analyzing the effect of parameter changes on lift drag ratio. The optimization process for airfoil design involves calculating gradients at different angles of attack to achieve an optimized design. The method produces a smooth change in lift drag ratio, allowing for quick optimization despite the presence of local optima. The addition of noise and momentum, along with optimizing multiple angles of attack simultaneously, help in reducing the impact of local optima. Further investigation into the effect of local optima is suggested for future research. Comparisons with simulated annealing are made, showing the effectiveness of the gradient descent method. Our method accelerates the automated design process by using gradient descent for evaluating lift drag ratio. In comparison to simulated annealing, our method converges in 200 iterations, while simulated annealing requires at least 1500 iterations. The time to perform a gradient update on design parameters and simulation is crucial for optimization. This section focuses on airfoil design problems only. The fluid solver for airfoil design converged in 37.8 seconds for 2D simulation and 163.8 seconds for 3D simulation. Sailfish library outperformed other Lattice Boltzmann libraries. Neural network updates took 0.052 seconds for 2D and 0.711 seconds for 3D simulations. Automated design on 2D airfoil took 141 hours, while our method only took 1.5 minutes for 200 iterations. Our method significantly reduced the time for airfoil design compared to automated design, taking only 1.5 minutes for 200 iterations at 9 angles of attack. While there are other methods to accelerate flow calculations, such as genetic algorithms and particle swarm methods, our approach showed a 5,000 times speed increase. The comparison between gradient descent optimization and simulated annealing in the 2D airfoil problem demonstrated clean gradients and smooth surfaces. Our novel method for automated design, utilizing neural networks and gradient descent, has shown strong evidence of overcoming current computational limitations. Future work includes applying this method to new domains like structural optimization and electromagnetism, particularly focusing on airfoil design in turbulent flows. Hybrid approaches combining neural network rough designs with high-fidelity simulations are also of interest. Key parameters include n1, n2, Ai, h, and \u03b8. The parameters n1, n2, Ai, h, and \u03b8 are key in the automated design method using neural networks and gradient descent. In the 2D case, n1 is fixed at 0.5 and n2 at 1.0 for a rounded airfoil head, with h fixed at zero. The trainable parameters are the 42 values for Ai on the upper and lower surfaces. In the 3D case, additional parameters include Bj, s, and l, with n1, n2, and h fixed as in the 2D case. Rotation angles \u03b8 and \u03c8 are included, with \u03c8 fixed at zero. Parameters s and l relate to wing sweep. The parameters s and l correspond to wing sweep, leaving A i s and B j s for optimization. 39 parameters are split equally, with 13 values for B i s and the remaining 26 split between the A i s for upper and lower surfaces. For more details, refer to BID13."
}