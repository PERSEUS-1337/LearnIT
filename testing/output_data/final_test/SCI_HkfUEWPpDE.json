{
    "title": "HkfUEWPpDE",
    "content": "Pattern databases are crucial for strong admissible heuristics in classical planning. Saturated cost partitioning is the most effective way to combine information from multiple pattern databases. A new method using saturated cost partitioning for pattern selection outperforms existing algorithms. Pattern database heuristics are a key component in optimal classical planning tasks. Pattern databases are essential for strong admissible heuristics in classical planning. It is beneficial to compute multiple pattern databases and combine their estimates admissibly. By choosing pattern databases with the highest estimate in each state or summing estimates from independent databases, more aspects of challenging planning tasks can be covered effectively. Pattern databases are crucial for strong admissible heuristics in classical planning. Independent estimates can be combined admissibly, and various cost partitioning algorithms exist to make heuristic estimates admissible by distributing operator costs among heuristics. Saturated cost partitioning (SCP) has been experimentally shown to be the preferred cost partitioning algorithm for benchmark tasks from previous International Planning Competitions (IPC). Saturated cost partitioning (SCP) BID30 BID37 is the preferred cost partitioning algorithm for PDB heuristics. It assigns costs iteratively to each heuristic to justify its estimates before moving on to the next heuristic. Pattern selection algorithms like BID3 and BID5 use bin packing and genetic algorithms to find optimal pattern collections for cost partitioning. BID11 introduced a hill-climbing search algorithm (HC) for pattern selection. The algorithm HC performs hill-climbing search in the space of pattern collections. BID8 introduced the Complementary PDBs Creation (CPC) method, combining bin packing and genetic algorithms to minimize search effort. BID28 uses counterexample-guided abstraction refinement to compute patterns, while BID26 systematically generates interesting patterns. Experiments show cost-partitioned heuristics over SYS-2 and SYS-3 are effective. SYS-SCP is a new pattern selection algorithm based on saturated cost partitioning that considers all interesting patterns but only selects useful ones. It builds multiple pattern sequences for optimal classical planning tasks in a SAS+ notation. Each sequence adds patterns in increasing order by size, ensuring informative selections. A transition system T is defined by a finite set of states, labels, transitions, initial state, and goal states. Planning tasks induce transition systems with states, labels, and transitions. A transition system T is defined by states, labels, transitions, initial state, and goal states. Planning tasks induce transition systems with states, labels, and transitions. Separating transition systems from cost functions allows evaluation under different cost functions, important for cost partitioning. Cost function for transition system T is a function cost: L(T) \u2192 R \u222a {\u2212\u221e, \u221e}. Weighted Transition Systems are pairs T, cost where T is a transition system and cost is a cost function for T. Optimal classical planning involves finding an optimal goal path in a transition system T with a cost function. Heuristics are used to estimate goal distances, and cost partitioning distributes costs among heuristics to make them admissible. Cost partitioning in optimal classical planning involves using a tuple of costs bounded by a sum over heuristics to induce a cost-partitioned heuristic. Saturated cost partitioning algorithm aims to reduce costs given to a heuristic without changing estimates, formalized by a saturated cost function that is minimal if no other function satisfies certain conditions. The minimum saturated cost function for abstraction heuristics is computed efficiently depending on the type of heuristic used. The saturated cost partitioning algorithm assigns costs iteratively to each heuristic to preserve estimates and uses the remaining costs for subsequent heuristics. The saturated cost partitioning heuristic computes minimum cost functions for abstraction heuristics efficiently. It assigns costs iteratively to each heuristic in a sequence, preserving estimates for subsequent heuristics. The SYS-NAIVE-X algorithm generates patterns up to size X, but many of these patterns may not provide useful information for cost-partitioned heuristics. There is no efficient way to discard uninformative patterns, even those without goal variables. However, in cost partitionings with non-negative cost functions, there are criteria to determine if a pattern is informative. The SYS-SCP algorithm selects a subset of interesting patterns from a planning task based on certain criteria. The criteria are defined by the causal graph of the task, which determines if a pattern is interesting or not. The SYS-SCP algorithm selects interesting patterns based on the causal graph of a planning task. CG(\u03a0| P ) is weakly connected and contains directed paths from nodes to goal variables. SYS-X generates patterns up to size X, often fewer than SYS-NAIVE-X on IPC benchmark tasks. A new pattern selection algorithm is proposed to consider all interesting patterns but selects only useful ones. The new pattern selection algorithm, SYS-SCP, creates pattern sequences by appending interesting patterns that increase heuristic values. It stops when no new patterns are selected or the time limit is reached. A time limit is imposed on the outer loop to control the algorithm's execution. The SYS-SCP algorithm imposes time limits on both the outer and inner loops to manage the evaluation of interesting patterns. The PATTERNUSEFUL function determines pattern selection by efficiently computing an equivalent test in the projection to P. Step 1 substitutes patterns P 1 to P n for \u03c3 and uses saturated cost partitioning heuristics. It shows that x = \u03a3 h Pi (cost i , s) is finite, where h Pi is non-negative for all s \u2208 S(T). The algorithm uses PDB heuristics for planning tasks with non-negative cost functions and transition systems. The text discusses the use of cost partitioning heuristics in planning tasks with non-negative cost functions and transition systems. It highlights the importance of selecting patterns based on goal distances in the induced transition system T. Theorem 1 simplifies the computation of heuristic values for solvable states by tracking the remaining cost function after computing h SCP \u03c3. This approach aims to improve efficiency in decision-making when adding patterns to the system. The text discusses the importance of choosing good cost partitionings for solvable states in planning tasks. While cost functions are not relevant for detecting unsolvable states, information about unsolvable states can still be extracted from projections. Abstract states in projections correspond to partial states in the original task, with unsolvable abstract states indicating dead ends. By identifying and pruning these dead ends during the A* search, unsolvable states can be eliminated. The order in which saturated cost partitioning considers component heuristics also plays a significant role. The text discusses the importance of choosing a good order for SYS-SCP, focusing on generating interesting patterns in increasing order by size. Four methods are proposed for sorting patterns of the same size, with the first method being random. The importance of accurate heuristic estimates near goal states is highlighted for effective planning. The text emphasizes the significance of accurate heuristic estimates near goal states for effective planning. It introduces methods for sorting patterns based on goal-connectedness, states in projection, and active operators. The SYS-SCP pattern selection algorithm was implemented in the Fast Downward planning system BID14 to determine the number of operators affecting a variable in a given pattern. Experiments were conducted using the Downward Lab toolkit on Intel Xeon Silver 4114 processors with a benchmark set of 1827 tasks from 48 domains. Time was limited to 30 minutes and memory to 3.5 GiB. Saturated cost partitioning was used for evaluation, showing preference for HC, SYS-2, and CPC patterns. All benchmarks, code, and experimental data have been published online for fair comparison of pattern collections. The diverse saturated cost partitioning heuristics are computed for a given pattern collection by starting with an empty family of heuristics and sampling states iteratively. If a new heuristic has a higher estimate for a state than all heuristics in the family, it is added. The diversification procedure stops after 200 seconds, followed by an A* search using the maximum heuristic in the family. The text discusses the comparison of different orders for patterns of the same size, highlighting the number of domains where one order solves more tasks than another. Ablation studies are conducted to evaluate the effects of changing parameters in the SYS-SCP algorithm before comparing it to other pattern selection algorithms. The text also mentions using a time limit for the outer loop in the evaluation process. In the PDB collection for all SYS-SCP runs, a time limit for the outer loop is crucial. The best combination for solving tasks is 10s for the inner loop and 100s for the outer loop. Instead of discarding computed pattern sequences, they are turned into full pattern orders by appending missing patterns. Diversifying with these orders leads to solving 1168 tasks, the best result obtained in all experiments. In the next experiment, SYS-SCP evaluates selecting interesting patterns up to a fixed size. Results show interesting patterns are preferable to naive patterns, with or without limits. Imposing limits is more beneficial for SYS-3 and leads to solving more tasks. SYS-3-LIM has the highest total coverage. SYS-SCP is compared to other pattern selection algorithms in Table 4. In the experiment, SYS-SCP outperforms other pattern selection algorithms, solving more tasks and achieving the highest total coverage of 1168 tasks. This is a significant improvement in optimal classical planning. In the final experiment, Scorpion BID37, a strong optimal planner in IPC 2018, benefits from using SYS-SCP patterns. Scorpion computes diverse heuristics and outperforms top IPC 2018 planners in per-domain comparisons. Scorpion variants outperform top IPC 2018 planners in per-domain comparisons by using SYS-SCP PDBs. The union of SYS-SCP and COMB heuristics increases total coverage to 1261 tasks. For maximum coverage, Scorpion only needs SYS-SCP PDBs and Cartesian abstraction heuristics. A new pattern selection algorithm based on saturated cost partitioning outperforms other planners."
}