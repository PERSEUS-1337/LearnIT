{
    "title": "BJlBNZDaP4",
    "content": "Oversubscription planning (OSP) involves finding plans that maximize utility within a cost bound. OSP problems can be solved optimally using the A* search algorithm, allowing for the application of classical planning techniques. Novel bound-sensitive heuristics are introduced to provide superior guidance in considering primary and secondary cost functions and bounds. We implement bound-sensitive variants of classical planning heuristics for oversubscription planning (OSP) problems, showing improved search performance compared to heuristics that do not consider bounds. OSP involves maximizing utility within a cost bound, with A* search commonly used for optimal solutions. Domain-independent classical planning approaches typically use A* search and automatically extracted heuristics. Our aim is to show that general methods from classical planning, including A* search, can be used in the oversubscription planning (OSP) setting nearly as is, without the need for adaptations like landmarks or abstractions. The study demonstrates that existing classical planning heuristics, with minor modifications, can guide the search for optimal plans in oversubscription planning (OSP) without specific reasoning about utilities. Experiments with A* search and bound-sensitive heuristics show competitive results. In oversubscription planning (OSP), bound-sensitive heuristics can lead to competitive search results without specific reasoning about utilities. Bounded-cost planning involves finding plans with costs below a given bound, using dedicated search algorithms and heuristics that consider accumulated cost and plan length at the current search node. Optimal OSP requires expanding all nodes potentially leading to a state with maximal utility, with heuristics taking into account bounds on secondary cost. In oversubscription planning, bound-sensitive heuristics can achieve competitive search results without specific reasoning about utilities. Planning tasks are described in terms of variables, actions, initial state, goal condition, and cost function. In classical planning, a state is defined by a full assignment to variables, with actions applicable based on preconditions. Operator sequences form plans with minimal cost, aiming to find an optimal plan for a planning problem. Variables and their values are referred to as facts, with partial assignments treated as sets of facts. An oversubscription planning (OSP) problem involves variable assignments, utility functions, and cost bounds to find valid plans with maximal utility. Multiple cost function (MCF) problems add primary and secondary cost functions with bounds to ensure valid plans meet all cost constraints. In oversubscription planning (OSP), valid plans maximize utility within cost bounds. Multiple cost function (MCF) planning requires primary cost minimization and secondary cost constraints. MCF problems with a single secondary cost function are considered, where OSP can be transformed into an MCF problem with a corresponding cost function. Different compilations, such as soft goals and state delta, are proposed for this task. In oversubscription planning (OSP), valid plans maximize utility within cost bounds. Different compilations, such as soft goals, are proposed to achieve this goal. Soft goals compilation removes utilities from the problem and can be applied in the OSP setting to result in an MCF planning problem. In oversubscription planning, valid plans maximize utility within cost bounds. The reformulated problem introduces actions with positive costs to achieve specific goals. The primary cost of a plan is calculated based on the maximum utility value minus the achieved utility value. This compilation assumes utilities are defined for single facts, but a more general case can handle utilities defined for logical formulae by introducing new variables and actions. The compilation of oversubscription planning involves introducing actions with positive costs to achieve specific goals. Two optimizations can be made to reduce the state space of the problem, including introducing an arbitrary ordering over variables and adding a new precondition fact to ensure certain actions occur at the end of the plan. The A* algorithm extends blind search techniques by incorporating admissible heuristics to pick nodes for expansion based on minimal cost. In oversubscription planning, actions with positive costs are introduced to achieve specific goals. The A* algorithm is adapted to the MCF planning setting by storing accumulated path costs at each node and pruning successor nodes with excessive costs. Duplicate detection is a key optimization in A* implementations. In oversubscription planning, the A* algorithm is adapted for MCF planning by storing path costs and pruning nodes with excessive costs. Newly discovered nodes are discarded or updated based on cost comparisons, with an open list ordering nodes by increasing primary f (n) value for superior performance. In MCF planning, classical heuristics ignoring bounds are uninformative. An optimal heuristic ignoring bounds may underestimate costs. The optimal cost depends on the bound value B. In MCF planning, classical heuristics ignoring bounds are uninformative. The optimal cost depends on the bound value B. To address this, bound-sensitive heuristics are introduced to guide heuristic search towards feasible solutions by considering secondary cost bounds. In MCF planning, an admissible bound-sensitive heuristic h(s, b) for a state s and budget vector b is defined as h(s, b) \u2264 h * (s, b) for all s, b. As the budget value decreases, the optimal bound-sensitive heuristic value h * (s, b) can only increase. Theorem 1 states that decreasing budget increases h*(s, b) and decreases achievable utility in MCF planning problems derived from OSP problems. The admissible heuristic hmax estimates cost recursively based on the most expensive fact in a set of facts F. The admissible heuristic h max estimates cost based on the most expensive fact in a set of facts F, using a set of secondary cost functions and bounds to obtain a bound-sensitive version of h max. This version restricts the set of achievers based on cost estimates, ensuring soundness but not completeness in plan generation. The admissible heuristic h max estimates cost based on the most expensive fact in a set of facts F, using secondary cost functions and bounds to obtain a bound-sensitive version. Merge-and-shrink heuristics incrementally build a representation of the full state space by merging transition systems and enforcing a size threshold. The algorithm abstracts multiple states into a single state, creating a single abstract transition system. Merge-and-shrink heuristics maintain minimum costs for transitions in the abstract state space. This approach provides a non-overestimation of the secondary cost between abstract states. The algorithm computes a bound-sensitive heuristic value for a state by finding the minimum cost path to an abstract goal state. This is done using a modified version of Dijkstra's algorithm that discards nodes with costs exceeding certain bounds. The heuristic is admissible and efficient, especially when a single secondary cost function is present. The algorithm computes a bound-sensitive heuristic value for a state using a modified version of Dijkstra's algorithm. The approach involves running Dijkstra only once during preprocessing and storing information as a sequence of pairs. This method was implemented in the Fast Downward planner BID2 and evaluated on various public datasets. The algorithm computes heuristic values using a modified Dijkstra's algorithm. Implemented in the Fast Downward planner BID2, evaluated on public datasets.  The algorithm in the Fast Downward planner BID2 computes heuristic values using a modified Dijkstra's algorithm. It is evaluated on public datasets and compared against OSP benchmarks from recent International Planning Competitions. The benchmarks replace goal facts with utilities and set bounds at different percentages of the optimal solution cost. The baseline for comparison is a blind branch-and-bound search. Our proposed approach of A* search on the MCF compilation of the OSP task is compared to a blind branch-and-bound search, currently the best available configuration for oversubscription planning. We experiment with blind A* search, A* using classical hmax and hMS, as well as the two heuristics' bound-sensitive variants. Experiments were conducted on Intel Xeon CPU machines with time and memory limits. Blind branch-and-bound search slightly outperforms blind A* in coverage, except for the 100% suite. Bound-sensitive heuristics are more informative on OSP problems, decreasing expansions significantly and leading to better coverage compared to non-bound-sensitive heuristics. Compared to non-bound-sensitive heuristics, bound-sensitive heuristics result in better coverage, especially in domains like BLOCKSWORLD, DRIVER-LOG, and MICONIC. h MS has the best coverage in the 100% suite, solving more problems than blind A*. However, h MS often times out before search begins. In the construction phase, h MS often times out before search begins, particularly in TIDYBOT, TETRIS, and PIPESWORLD-NOTANKAGE domains. A hybrid approach is suggested, setting an upper bound on heuristic construction time and switching to blind search if construction exceeds this limit. With a 10-minute bound, the planner outperforms blind A* in various suites. This highlights the potential for less costly h MS schemes with maintained informativeness for future research. Classical planning with A* algorithm for oversubscription planning problems introduced bound-sensitive heuristics, showing state-of-the-art results. Future research may explore non-admissible heuristics for satisficing OSP and applying these heuristics in planning settings with tradeoffs between cost functions. The method for obtaining bound-sensitive heuristics is general and applicable to various planning domains. Our methods are applicable to numeric planning problems with decreasing resources expressed in secondary cost functions and bounds. Boundsensitive heuristics offer a principled way to reason about numeric variables in this context."
}