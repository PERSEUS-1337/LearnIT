{
    "title": "rJl7N-9ctN",
    "content": "Generating and scheduling activities is challenging due to consumptive resources and complex interactions like time-dependent resource usage. Three methods for determining valid temporal intervals for activities in a plan are presented: Max Duration, Probe, and Linear algorithms. These techniques are applied to scheduling awakes for a planetary rover, showing competitive performance between Probe and Linear algorithms, outperforming Max Duration algorithm. Empirical runtime differences are also presented. The Probe algorithm is compared with the Max Duration and Linear algorithms in terms of runtime differences for scheduling activities for a planetary rover. The Mars 2020 rover relies on consumptive resources like energy and data, which are replenished periodically. The scheduler must consider resource replenishment to avoid constraints violations. Focus is on awake and asleep scheduling for the rover, with techniques applicable to complex consumptive resource activities. The onboard scheduler for NASA's Mars 2020 rover is the main focus. The Mars 2020 rover relies on energy as the limiting consumptive resource, with the Multi-Mission Radioisotope Thermoelectric Generator (MMRTG) providing constant energy. The rover can only increase its energy when asleep, but must stay awake to execute activities and generate a schedule through the onboard scheduler. The scheduler computes valid start times for awake periods and activities to ensure sufficient energy. The Mars 2020 rover relies on energy from the MMRTG to power its activities. Awake periods and activities require varying energy sizes, with valid start times challenging to determine. The paper discusses timeline representation and calculating valid start time intervals for activities. The paper discusses a general approach to handling automatically generated awakes and specific challenges in scheduling activities for the Mars 2020 rover. Three specific approaches are presented: an over-conservative approach, a \"probing\" approach, and a linear algebra approach. The \"probing\" approach is currently used for the M2020 onboard scheduler. The paper discusses handling automatically generated awakes and scheduling activities for the Mars 2020 rover. It suggests extending the existing awake rather than creating a new one to accommodate longer shutdowns. Timelines are used to model resource utilization and temporal constraints for the onboard scheduler, projecting the impact of activities on shared states and resources. The paper discusses using timelines to model resource utilization and temporal constraints for the Mars 2020 rover's onboard scheduler. Timeline bounds define maximum or minimum range values, while timeline values can be calculated from timeline impacts. Different types of timelines exist, with a focus on the Cumulative Rate timeline, which allows changes in incremental values. Activities scheduled within valid intervals create no conflicts on the timeline. The Cumulative Rate timeline represents incremental SOC drained and gained from being awake and asleep. Valid intervals are calculated by placing activities as impacts at different times to avoid conflicts. This operation has a complexity of O(N \u00b7 N). The overall runtime for impact propagation in the timeline is O(N^2), with potentially O(N) impacts. Calculations between impacts are constant time, but become more complex when impact offsets are not fixed. Methods for handling fixed offsets or calculating valid intervals using a different algorithm are presented. The scheduler is given a list of activities and a global minimum SOC constraint. Each activity may require preheat activities, maintenance heating activities, or an awake activity. The goal is to calculate valid intervals for each activity, focusing on the required awake activity. The scheduler calculates valid intervals for each activity, focusing on awake activities. An awake activity consists of a wakeup and shutdown, with wakeups and shutdowns being the same duration. The MMRTG generates energy consistently, while the rover consumes energy when awake and idle. The net change in SOC is determined by the difference between energy generated and consumed. The scheduling algorithm is based on these principles. The scheduling algorithm for awake activities involves calculating valid intervals based on Cumulative Rate Timeline. These intervals, denoted as S i, are computed before considering SOC to improve runtime. After determining valid intervals, the scheduler places activities at their preferred times, denoted as r i, as a soft constraint. The scheduler prefers to schedule activities close to their preferred time, denoted as r i, as a soft constraint. Valid interval calculations for non-constant duration activities are complex due to assumptions about constant relative time between impacts and prior knowledge of activity duration. Determining valid intervals for scheduling activities is complex when duration depends on scheduled time. Activities' input intervals are split into smaller intervals based on proximity to existing awakes and constraints. Cases include being fully encompassed by an existing awake, disjoint from existing awakes, or overlapping with an existing awake. When activities overlap with an existing awake, the awake must be extended to encompass the activities to prevent degradation from excessive rover on-off throttling. There are minimum asleep constraints after a shutdown and before a wakeup to ensure proper functioning. Activities requiring an awake cannot be scheduled during a wakeup or shutdown. If activities overlap with a constraint, the nearest existing awake must be extended to cover the activities. The duration of awake intervals is independent of activity start times for cases 1 and 2, requiring no additional awake in case 1 and an awake equal to the activities' duration in case 2. Cases 3 and 4 involve extending existing awakes based on activity scheduling, with varying durations and energy consumption. The scheduling algorithm categorizes awake intervals based on activity placement, with algorithms designed for straddle and stretch cases to determine awake duration. Violating mission constraints like minimum battery SOC is a significant problem. The Max Duration algorithm assumes the maximum awake duration required to schedule activities, simplifying valid interval calculations. Examples of maximum awake durations for leading and trailing interval cases are shown in FIG2. The Max Duration algorithm simplifies valid interval calculations by assuming a constant awake duration, but this approach can be overconservative and lead to resource \"double-dipping.\" The Probe approach determines the exact awake duration at specific points in time, avoiding complications of computing valid intervals throughout the entire input interval. The Probe algorithm simplifies valid interval calculations by checking specific points in time, reducing runtime and ensuring exact awake duration. Unlike the Max Duration algorithm, Probe only probes predetermined points, improving efficiency. The Probe algorithm simplifies valid interval calculations by checking specific predetermined points in time, ensuring exact awake duration. It is under-conservative in the interval search space and may miss solutions if probe locations are not well-defined. The Linear algorithm calculates exact valid intervals using a linear increase in energy cost and awake duration, with distinctions in straddle and stretch cases. The algorithm determines valid intervals by checking for conflicts at specific points in time within an input interval. If conflicts are found, no valid solution exists. If no conflicts are found, a valid interval is identified. The algorithm considers timeline impacts and values to determine the start and end of the valid interval. The algorithm calculates valid intervals by checking for conflicts at specific points in time within an input interval. It determines the minimum and maximum awake times, ensuring a valid solution exists. The maximum energy usage without violating constraints is calculated, along with the potential awake duration based on energy cost. The function determines the potential awake duration by subtracting energy costs of activities not affected by placement. Steps 3c and 3d differ slightly from 3a and 3b due to how awake affects the SOC timeline. Energy is gained only when the rover is asleep, with energy lost if awake is extended. The algorithm calculates the maximum awake duration without violating the minimum SOC constraint. In the trailing case, the awake extends in the opposite direction, leading to changes in the awake duration at different points. Steps 3c and 3d are not needed in this case. Extending the awake from end(I j ) ensures no violation of the minimum SOC constraint between [start(I j ), end(I j )]. The algorithm is proven to be both sound and complete. The algorithm ensures no violation of the minimum SOC constraint by calculating the maximum awake duration in a trailing extension interval. This is proven through a proof by contradiction, showing that scheduling A i without violating C min soc is not possible. The algorithm proves that scheduling activities without violating the minimum SOC constraint is not possible. Evaluating the performance of each method involves applying algorithms to sets of inputs derived from expected Mars 2020 rover operations data. This increases code complexity and runtime costs, raising the question of whether the increased completeness is worth it. The M2020 surrogate scheduler, based on the same algorithm as the operational scheduler, is used on a Linux workstation for rapid research. Different algorithms are tested with varying incoming SOC levels to assess scheduling difficulty based on energy consumption constraints. The study focuses on sleep scheduling algorithms for a rover, where varying the incoming SOC affects the difficulty of the problem. Higher SOC makes scheduling easier, while lower SOC makes it harder. Different algorithms are compared based on performance and runtimes as SOC decreases. The M2020 surrogate scheduler is used for research on a Linux workstation with varying SOC levels to assess scheduling difficulty. The study compares different sleep scheduling algorithms for a rover as the incoming SOC decreases, making scheduling more challenging. The Max Duration approach performs poorly, while the distinction between the Probe and Linear approaches is unclear. The scheduler focuses on locally optimal states and does not prioritize global optimality due to computational limitations. The M2020 onboard scheduler is a one-shot, non-backtracking scheduler that aims to schedule activities as close to their preferred times as possible. The scheduler aims to schedule activities close to their preferred times without considering future impacts, leading to suboptimal results. As the incoming SOC increases, more activities can be scheduled. The Max Duration algorithm performs poorly with baseline durations but improves with extended durations. The Linear algorithm outperforms others when scheduling one activity at a time from a partial schedule. The Linear algorithm outperforms other algorithms in scheduling activities, especially for longer durations. The M2020 team has developed Copilot to adjust scheduling priorities using Monte Carlo and Squeaky Wheel Optimization BID9. The algorithm may struggle with scheduling multiple shorter activities or activities with dependencies, while the Probe algorithm can successfully schedule multiple future activities due to excess energy. The Linear algorithm outperforms other methods in scheduling activities, particularly for longer durations. It is more locally optimal compared to the Probe and Max Duration methods. The focus is on balancing local optimality in scheduling future activities. The Linear algorithm outperforms other methods in scheduling activities for longer durations, focusing on balancing local optimality. Increasing the length of stretch and straddle regions clarifies differences between algorithms, with the Linear algorithm performing better with longer wakeup and shutdown durations. The Linear algorithm outperforms the Probe algorithm with longer wakeup and shutdown durations. The Max Duration algorithm also shows improvement by utilizing its advantage over the Probe algorithm. The runtime performance of each algorithm is crucial, with the Probe algorithm significantly outperforming the others in total scheduling runtime. The Max Duration algorithm is the slowest due to its need to search through multiple regions for valid intervals, resulting in a large standard deviation in runtime. It may be fast if it finds a valid interval early on, but slow otherwise. The difference in runtime between the Probe and Linear algorithms is substantial, with a two-fold increase in total runtime. Future research should consider energy management challenges related to preheat and maintenance heating, as well as analyzing scheduling algorithms for these tasks. In this paper, the analysis focused on comparing runtimes between different algorithms for scheduling preheats and maintenances onboard a rover. The study also highlighted the importance of considering energy management challenges and optimizing scheduling algorithms for efficient operations. The study compared runtimes of algorithms for scheduling preheats and maintenances on a rover. MAPGEN managed battery SOC for Mars Exploration Rovers, while Remote Agent considered consumptive resources like energy and data volume. Scheduling activities with consumptive regenerative resources is challenging, especially when feasibility depends on interactions with the existing schedule. Scheduling activities on a rover with consumptive regenerative resources is challenging due to interactions with the existing schedule. Three algorithms - Max Duration, Probe, and Linear - were compared for scheduling awakes, with the Probe algorithm showing promise as a fair alternative with ease of implementation and runtime improvement."
}