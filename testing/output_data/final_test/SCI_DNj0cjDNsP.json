{
    "title": "DNj0cjDNsP",
    "content": "The paper proposes a novel approach to improve surface mapping through local refinement. It involves four phases: inspection and creation of landmarks, segmentation, optimization of deformation, and aggregation of mappings. A new method is also introduced to deform the mesh to meet constraints, adjusting cotangent weights incrementally to ensure a deformation free of flipped faces. Our new deformation approach, Iterative Least Squares Conformal Mapping (ILSCM), achieves low conformal distortion and outperforms other methods. It is a general approach tested on improving mappings from different existing surfaces. The effectiveness of mapping methods for cross-surface mapping between 3D objects has been tested. While existing methods may result in good overall mappings, specific semantic features like articulations and facial features may remain misaligned. This imperfection is often unacceptable in production settings where artists require a high degree of control over the final result. Typically, improving results using surface mapping methods involves iteratively inserting landmarks and solving for the mapping globally. This paper introduces a surface mapping editing approach that allows for local and precise adjustments to the map. The process involves setting landmarks in regions of discrepancy between two meshes, extracting patches, flattening them on a common planar domain, and optimizing the mapping through 2D deformation while maintaining correspondence and limiting distortion. The paper introduces a new 2D deformation approach called Iterative Least Squares Conformal Maps (ILSCM) to improve surface mapping by aligning landmarks without degrading the overall mapping. The approach ensures progress towards satisfying constraints and combines local surface maps to form an improved global surface mapping, offering three novel scientific contributions. The paper introduces a new 2D deformation approach called ILSCM for surface mapping, offering three novel scientific contributions: practical local surface map editing, compact segmentation for aligning landmarks, and a deformation approach that preserves conformal energy. Comparatively fewer methods have been proposed on correspondence editing, with Nguyen et al. focusing on optimizing consistency of map sets between surfaces. The method proposed by Ovsjanikov et al. uses functional maps based on Laplacian eigenfunctions for establishing surface correspondences. However, it requires multiple maps for a pair of surfaces and is limited to near-isometric surfaces. Ezuz and Ben-Chen's method removes the isometric restriction but may need significant modifications for local mapping adjustments guided by the user. The mapping between mesh A and B is globally good but locally misaligned in the head region. A method for deblurring and denoising functional maps involves smoothing a reconstructed map by mapping Laplacian eigenfunctions. Selecting the right number of eigenfunctions for denoising is challenging, as increasing them initially decreases error until a minimum is reached. Gehre et al. incorporate curve constraints for updating mappings between non-isometric surfaces. Functional map optimization for updating mappings between non-isometric surfaces involves an interactive process with numerical methods. Various approaches, such as iterative filtering schemes and weighted averages with landmarks, have been proposed to improve mapping accuracy. However, some methods have restrictions, such as requiring surfaces to have the same number of vertices. The improved mapping application faces challenges in fine-tuning mappings without affecting undesired areas. Different methods like LSCM and biharmonic weights offer deformation solutions but may introduce fold-overs. Achieving injectivity is a crucial goal in mapping optimization. The method of Chen and Weber avoids fold-overs by applying constraints to boundaries, while Locally Injective Mappings (LIM) and Scalable Locally Injective Mappings (SLIM) prevent fold-overs by increasing energy for degenerate triangles. However, LIM and SLIM may produce inferior results when triangles become degenerate due to user constraints. In their presence, LIM and SLIM often produce inferior results compared to Golla et al. who outperform them by modifying Newton iteration for optimizing energies on triangle meshes. The proposed method involves locally adjusting surface mapping to align user-set landmarks by deforming a local segmented patch of the mesh. A new deformation approach is derived to minimize conformal energy iteratively without flipped triangles. Our ILSCM approach optimizes the quadratic LSCM energy by minimizing conformal energy iteratively without flipped triangles. It relaxes user constraints to avoid flips, ensuring better satisfaction than initially. This method improves surface mapping locally by finding an optimal flow of vertices based on conformal energy minimization. Our approach locally improves surface mapping by allowing users to set landmarks in regions that need alignment. Deformation of mesh parts is done to enhance alignment based on user-provided landmarks, with a focus on low distortion. Planar parameterization is used for better control on distortion, with segmentation for smaller segments leading to less distortion. Our approach involves deforming mesh segments in the planar parameterization space to update surface mapping. The deformation is guided by our ILSCM to minimize distortion. The mapping is then extracted based on segment overlap. The method works with input meshes A and B, using a vertex-to-point surface mapping. Users can visualize mismatches using texture maps and set landmarks in regions needing alignment. The user sets landmarks on both meshes to match regions, expressed as barycentric coordinates. Editing the map locally involves identifying a connected segment with specific topology and size requirements. Outside these segments, the mapping is assumed to be satisfactory for setting boundary conditions during deformation. Our segmentation method involves three steps: growing an initial patch on the 3D surface from landmarks, flattening the patch in 2D, computing a compact 2D patch from the convex hull of landmarks, and growing the compact patch to prepare for low-distortion deformation. The segmentation method involves growing an initial patch on the 3D surface from landmarks, flattening it in 2D, computing a compact 2D patch from the convex hull of landmarks, and preparing for low-distortion deformation. Landmark positions are calculated on mesh A based on the mapping from mesh B, ensuring the patch contains all landmarks and meets specific conditions. The segmentation method involves growing an initial patch on the 3D surface from landmarks, flattening it in 2D, and computing a compact 2D patch from the convex hull of landmarks. This process ensures the patch meets specific conditions and avoids large concavities in its boundary. The segmentation method involves growing an initial patch on the 3D surface from landmarks, filling missing faces to prevent unwanted deformation, and balancing patch size to minimize distortion between 3D and 2D representations. To prevent distortion between 3D and 2D representations, the compact patch is grown around landmarks, ensuring enough room for diffusion of deformation. Extending the patch outward is necessary for a good boundary condition, with the distance proportional to the geodesic distance between landmarks. Comparing distortion between 3D and 2D patches, it is observed that very small patches lack sufficient room for movement. The text discusses the importance of finding a good compromise in patch size to minimize distortion when moving landmarks. It emphasizes the need to apply steps one and two before step three to avoid creating artificial boundaries. The final segments are flattened using ABF++ to ensure a parameterization without flipped components. The text discusses using ABF++ to flatten segments for a parameterization without flipped triangles. It aligns landmarks by deforming one mesh to minimize distortion, using energy minimization with user constraints. The text discusses using ABF++ to flatten segments for parameterization without flipped triangles. It aligns landmarks by deforming one mesh to minimize distortion using energy minimization with user constraints, including positional constraints and distortion preventing regularization. The text discusses deforming a mesh to align landmarks while minimizing distortion using energy minimization with user constraints. Different deformation energies are compared for shape preservation, with LSCM being the best but prone to introducing flips. The comparison of deformation energies for shape preservation shows that LSCM has the least distortion but may introduce flips, while LIM, SLIM, and KP-Newton guarantee injectivity but have more distortion. LIM minimizes a joint energy optimizing distortion and flips, but results in higher distortion energy compared to LSCM. Our approach, Iterative LSCM (ILSCM), bridges the gap between shape preservation and injectivity in deformation methods. ILSCM iteratively optimizes to decrease E(V) while preventing triangle flips. It adapts \u03bb to guarantee no flips occur during optimization. To ensure no flips occur during optimization, \u03bb is adaptively adjusted to meet user constraints. The approach guarantees prevention of triangle flips and limits mesh distortion, with examples showing convergence to user constraints. A larger \u03bb speeds up convergence but increases the likelihood of stopping progress. In experiments, \u03bb is adjusted to prevent flipped triangles and meet user constraints. Starting with \u03bb = 1000, iterations may reduce \u03bb if flips occur. Landmark movement remains continuous for different \u03bb values. In experiments, the value of \u03bb is adjusted to prevent flipped triangles and meet user constraints. Starting with a large value of \u03bb, iterations may reduce it if flips occur. Landmark movement remains continuous for different \u03bb values. The last phase involves updating the surface mapping between A and B from planar parameterizations by extracting, aggregating, and transferring mappings. This approach is validated with various cases of faces and objects with different morphologies from different data sets and artist contributions. The experiments evaluate the approach based on initial mapping methods and the number of landmarks and segments. The method prevents flipped triangles, preserves shape, and distributes deformation error uniformly. Distortion energy is lower than SLIM, often lower than LIM, and slightly greater than LSCM. The optimization strategy for the approach is more suited than joint optimization. ILSCM distributed errors uniformly over the deformed mesh compared to LIM, SLIM, and KP-Newton. The iterative approach progressively deforms meshes in the video, similar to examples from the LIM paper. Various barrier weights were experimented with for LIM to prevent flips. Barrier weights ranging from 1E\u22124 to 1E\u221220 were tested for LIM, with weights below 1E\u221212 having minimal impact and weights at or below 1E\u221220 not converging. Deformation energy was lowest when using weights from the flattened B i initial state. Visualization validation was done using texture transfer with grid textures, showing improved mappings in Figs. 1, 20, and 13. The editing approach results in better mappings with smooth transitions at boundaries, as shown in Figs. 14 and 21. Realistic facial textures are used to highlight important features in modeling, texturing, and animation. The comparison video demonstrates the effectiveness of the edited mapping in transferring texture between meshes A and B. The approach focuses on improving facial texture mapping for animation by addressing issues around the nose and lips. It provides local solutions for specific semantic regions, enhancing correspondence of animation-related features. The method assumes segments can be flattened to 2D without flipped triangles, ensuring robustness in injective mappings. Our approach is robust to cases with flipped faces and small discrepancies in industry meshes. Even when dealing with different genera, our method can improve mappings without degrading them. While injective mappings may not always be achievable, our edited mappings maintain reasonable properties. Qualitative evaluations show clear improvements in facial texture mapping for animation. Our approach demonstrates clear improvements in mapping accuracy, as shown in the qualitative evaluations of Sec. 4.1. By comparing our method to existing approaches, we can see enhancements in specific regions without compromising the overall mapping quality. Additionally, morphing meshes using our mapping allows for further evaluation of its effectiveness. The mapping accuracy is improved by morphing meshes using the updated mapping, which ensures correct vertex placement and density for animation attributes. Evaluation shows the edited mapping is as good as or better than the initial mapping in terms of distortion of the morphed mesh. The mapping accuracy is improved by morphing meshes using the updated mapping, ensuring correct vertex placement and density for animation attributes. A qualitative comparison was performed between the edited mapping and methods by Ezuz and Ben-Chen. Various techniques such as LIM, SLIM, KM-Newton, and ILSCM were used for mapping editing, comparing local and global editing methods. Initial mapping was established using a functional mapping method, and mappings improved using different approaches were compared. The mapping accuracy is enhanced by morphing meshes with updated mapping, ensuring correct vertex placement and density for animation attributes. ILSCM outperforms other methods in adjusting the mapping, with the added control of landmarks providing significant improvements. Global mapping adjustments require initial constraints and parameters, with some methods not allowing user guidance with landmarks. Our method improves mapping accuracy by locally adjusting landmarks, avoiding unexpected changes globally. Comparisons show our approach outperforms global mapping methods, such as the WA method by Panozzo et al. Our method focuses on improving mapping accuracy by locally adjusting landmarks, which has shown to be beneficial in various applications such as texture transfer, animation setup transfer, and deformation transfer. By correcting the mapping, issues and deformations in fine features can be resolved, as demonstrated in facial and skeleton transfer results. Our approach focuses on improving surface mapping accuracy locally, particularly in areas like the thumb region. It addresses issues with inner boundaries, such as those found in ears, eyes, nostrils, and mouths of characters. By filling inner boundaries, we enhance deformation results, striking a balance between traditional shape-preserving methods and modern injectivity-constrained optimization techniques. Our approach minimizes the shape-preserving term and improves user constraints iteratively while maintaining a locally injective map. By controlling the \u03bb parameter, we ensure a locally injective configuration in each iteration. The final result will be a locally injective configuration, achieved by iteratively improving user constraints while controlling the \u03bb parameter. Convergence to a locally injective configuration is aimed for, although it cannot be guaranteed due to the possibility of flipped faces. Failure cases with different deformation methods are demonstrated in Appendix B, but in experiments, constraints are satisfied even for extreme deformations. Improved mappings are obtained from various initial methods. The approach aims to improve mappings by aligning semantic features and maintaining injectivity, not just minimizing deformation energy. Results were analyzed to identify detrimental deformations, with some cases showing triangles becoming significantly narrower. Comparison was made with LIM and SLIM methods. Our approach, ILSCM, outperformed LIM, SLIM, and KP-Newton in terms of shape preservation and final triangulation. Experiments were conducted on a 3.40 GHz Intel Core-i7-4770 CPU with 12 GB of memory using MATLAB. Computation times for segmentation and deformation phases are shown in Table 1. The iterative nature of our deformation method affects the time to edit a mapping. Our novel approach for improving surface mappings locally is based on low-distortion region-growing segmentation and planar parameterization of segments. The mapping is optimized using user-prescribed landmarks, resulting in a robust joint planar parameterization deformation with low distortion. This iterative LSCM approach can be applied in various contexts requiring low distortion deformations. Our approach for improving surface mappings locally involves low-distortion region-growing segmentation and planar parameterization of segments. The mapping is optimized using user-prescribed landmarks, allowing for a robust joint planar parameterization deformation with low distortion. This method can be applied in various contexts requiring low distortion deformations. Additionally, our local editing capabilities provide control for fixing mapping issues and offer opportunities for future work in higher-level landmarks such as lines. Our approach involves improving surface mappings locally through low-distortion region-growing segmentation and planar parameterization. The deformation method iteratively finds a sequence of 2D embeddings of a given patch, ensuring a single solution even with small values of \u03bb. The energy term E B pulls boundary vertices to their corresponding positions, allowing for control over animation retargeting. Our approach involves improving surface mappings locally through low-distortion region-growing segmentation and planar parameterization. The deformation method iteratively finds a sequence of 2D embeddings of a given patch, ensuring a single solution even with small values of \u03bb. The resulting embedding at every iteration V i has no fold-overs if the initial embedding V 0 has none. The new set of vertex positions V i+1 is obtained by solving an optimization problem with a parameter \u03bb > 0. The proof shows that a \u03bb k always exists for a fold-over free configuration. The determinant of B(x) is a continuous function in x, proven by induction on n. If det(B(x)) = 0 for all x, then B(x) is invertible with a specific analytic expression for its inverse. The inverse of a matrix has an analytic expression using the matrix of co-factors. The determinant of B(x) being zero implies B(x) is invertible with a continuous inverse. The minimizer V i+1 (\u03bb) has a least squares analytical solution using matrix A and vector b. Matrix A(\u03bb) has a specific structure with different components. The patch constraints are encoded by matrices A 1, A 2, A 3, and A 4, weighted by \u03bb and a small constant \u03be. The matrix A 3 4 has rank n for all \u03bb values, ensuring a unique solution with 2 constrained vertices. The matrix A 3 4 has rank n for all \u03bb values, ensuring a unique solution with 2 constrained vertices. When stacking A 1 and A 2 to A 3 4 to form the final matrix A, rank(A(\u03bb)) = n for all \u03bb. This implies that A has full rank, leading to det(A(\u03bb)) = 0 for all \u03bb. The embedding V i+1(\u03bb) is continuous in \u03bb, and there exists a k > 0 such that V i+1(\u03bb k) has no fold-overs. This ensures that at every iteration, the embedding V i+1 has no fold-overs. By proving Theorem .7, it is shown that the embedding V i+1 at each iteration is injective with no fold-overs. The deformation method ensures progress towards meeting landmarks and constraints without flipped faces, but cannot guarantee satisfaction of user constraints. There are cases where meeting constraints is impossible, including \"hard\" cases where deformation methods like LIM, SLIM, KP-Newton, and others may not find a solution."
}