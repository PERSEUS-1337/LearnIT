{
    "title": "r1edp2VYwH",
    "content": "The paper presents a method for stemming Amharic words to their base form, efficiently removing affixes to preserve semantic information. This approach is designed for under-resourced languages like Amharic, lacking powerful stemming tools. The stemmer identifies prefixes, suffixes, and infixes in Amharic words to derive the stem. The paper introduces a method for stemming Amharic words by efficiently removing affixes to preserve semantic information. The stemmer does not require additional resources for verification and shows a 7% increase in correctness compared to current state-of-the-art stemmers. The approach focuses on reducing morphological variations in Amharic words by removing affixes. The Amharic stemmer algorithm focuses on removing affixes from words to derive the base form. It uses substring pattern expressions to identify and strip affixes, implemented in Python. Challenges include the language's morphological richness, difficulty in handling infixes, and identifying compound words. The Amharic stemmer algorithm aims to handle the complexity of the language by addressing issues such as compound words and loan words. The research focuses on developing a stemmer with minimal errors and improving the performance of Amharic sentiment classification. The paper is organized into sections discussing related works, the proposed Amharic Stemmer, and stemmer evaluations. The Amharic Stemmer is discussed in section 3, with evaluations presented in section 4. Existing works related to stemmers are categorized into three types: truncating, statistical, and mixed. Stemmer development was initially limited to English but has since expanded to other languages like Spanish, Urdu, Arabic, and Amharic. A rule-based Amharic stemmer using dictionary look-up and corpus statistics was developed by Argaw & Asker in 2007, containing 65 rules. The Amharic stemmer developed by Argaw & Asker in 2007 contains 65 rules to reduce Amharic words to citation form for cross-lingual information retrieval. Fikremariam (2009) developed a corpus-based approach using the successor variety algorithm with peak and plateau method, achieving an accuracy of 71.8% on news corpus. Gasser (2017) built a morphological tool for Amharic, Oromo, and Tigreygna languages, utilizing Finite State Transducer for morphological analysis and generation. The developed tool HornMorpho evaluates the morphological analyzer for Amharic and Tigreygna, achieving accuracies of 99%, 95.5%, and 96% for different word types. Despite its many features, the tool has limitations such as lack of language coverage and being computationally expensive. To address this, an efficient Amharic light stemmer is being developed for sentiment classification. Our approach involves designing a light stemmer for Amharic language to preserve semantic information by removing frequent prefixes and postfixes from words. Unlike previous stemmers, our method reduces surface words to stems that retain the original word's meaning. The Amharic light stemmer proposed in this study aims to preserve semantic information by removing prefixes and suffixes from words using affix lists and specific conditions. The stemmer algorithm removes affixes based on longest match patterns with regular expressions, terminating if no match is found. The minimum length of the stem/root is set to be at least two characters. The proposed framework for developing an efficient Amharic light stemmer includes different steps to preserve sentiment information. Lexicons are used to compute sentiment scores of Amharic texts for testing the stemmer's performance. Basic preprocessing steps are applied to Amharic News Comments, with Amharic script symbols adapted from Geez alphabets. Each alphabet has 7 syllabic forms representing consonant-vowel pairs. The Amharic script symbols are adapted from Geez alphabets, with 33 base alphabets and 7 orders representing consonant-vowel pairs. There are redundant alphabets that need normalization, and conversion to consonant-vowel form is required to handle the language's vowel features explicitly. The Amharic script symbols are adapted from Geez alphabets, with 33 base alphabets and 7 orders representing consonant-vowel pairs. Conversion to consonant-vowel form is necessary for handling the language's vowel features explicitly. This involves developing a mapping lookup table for Amharic scripts, normalizing vowels, and enforcing conditions for formal writing. Irregular nouns, place names, person names, verbs, prepositions, and adjectives require special identification to handle exceptions in regular expressions and suffix lists for morphological information. After adapting Amharic script symbols from Geez alphabets, 97 suffix lists representing morphological information were identified, including gender, case, tense, and part of speech. Conditional rules were enforced to remove infixes, with 30 prefix lists also identified. The stemming process aimed to handle irregular nouns, verbs, and adjectives, ensuring proper handling of exceptions in formal writing. The proposed Amharic light stemmer is a weight stemmer that removes affixes to obtain the root form of Amharic words without the need for an additional dictionary. The algorithm considers all possible affixes (suffixes, infixes, and prefixes) starting from the longest match to the shortest match. For example, when stemming the word \u1264\u1273\u1278\u12cd\u1295, the longest match suffix -\u12a3\u127d\u12a7\u12cd\u1295 is removed first before the shorter suffix -\u12cd\u1295, following a specific set of steps. The proposed Amharic light stemmer algorithm 1 implements steps for processing Amharic words by removing suffixes and prefixes recursively based on predefined lists. The algorithm normalizes input words and converts them into consonant-vowel form before applying the stemming process. The Amharic light stemmer algorithm implements steps for processing words by removing suffixes and prefixes recursively. The sentiment score of each stemmed word is matched with Amharic sentiment lexicons, and the sentiment class of the comment is decided based on the computed score. If the score is greater than zero, the sentiment is positive; if less than zero, it is negative; otherwise, it is unclassified or neutral. The Amharic light stemmer algorithm processes words by removing suffixes and prefixes recursively. The sentiment of the comment is classified as positive if the score is greater than zero, negative if less than zero, or unclassified/neutral if the score is zero. The Amharic Sentiment Lexicon is used for normalization and tokenization of comments, with a focus on the performance of the light stemmer in Amharic sentiment classification. The evaluation of the stemmer includes metrics like stemmer strength and index compression factor to determine its performance in improving Amharic sentiment classification. Stemmer strength is measured by the Mean of Words per Conflation class (MWC), where a higher MWC indicates a heavy stemmer with over stemming errors, while a lower MWC indicates a light stemmer with under stemming errors. The MWC value of the stemmer is presented in Table 2 for small and large corpora, providing insight into the stemmer's conflation evaluation. The Index Compression Factor (ICF) is a metric used to evaluate stemmers' conflation rate, indicating the extent to which the stemming operation reduces the input word collections for efficient information retrieval. It calculates the compression of words before and after stemming, with smaller index sizes requiring less storage space. Table 2 shows the ICF values of the stemmer on small and large corpora, demonstrating the compression of index terms for IR applications. The stemmer's performance was compared to Hornmorpho on small and large corpora, showing that Hornmorpho is stronger in removing affixes and generating roots. However, the stemmer may be more suitable for text classification tasks like sentiment analysis. The stemmer's index compression factor is similar to Hornmorpho, indicating efficient compression of index terms for information retrieval applications. The stemmer compresses index terms efficiently for information retrieval applications, but errors like over-stemming and under-stemming can lead to poor performance. These errors result in the dilution of different meanings into stems or the distribution of a single concept over multiple stems. Mis-stemming occurs when affixes containing semantic information are removed from the root. This impacts the recall rate in information retrieval tasks. The stemmer generates different roots for words with the same stem, leading to over-stemming and under-stemming issues. Compared to Hornmorpho, our stemmer produces more roots on large corpora but similar results on small corpora. Despite some errors, our stemmer retains more semantic information in the generated roots. In small corpus analysis, errors like under-stemming, over-stemming, spelling errors, and unchanged words were categorized. Our stemmer outperformed Hornmorpho in generating correct root words, while Hornmorpho had issues with over-stemming and under-stemming errors. Our stemmer has a higher accuracy (77%) compared to Hornmorpho (70%), but struggles with removing affixes like single letter suffixes and prefixes. It also faces challenges in detecting and removing reduplication, requiring a disambiguation model for accurate processing. Prior to sentiment score calculation of Amharic Facebook comments, basic text preprocessing operations are performed. The effect of stemming on Amharic sentiment classification is evaluated through the comparison of our stemmer with HornMorpho. Results show an increase in accuracy from 53.7% to 86.2% with our stemmer and 53.7% to 67.9% with HornMorpho. The study compared the performance of an Amharic stemmer with HornMorpho for sentiment classification. The stemmer improved accuracy from 53.7% to 86.2%, outperforming HornMorpho. The study highlights the importance of using a stemmer for efficient Amharic sentiment classification and preserving semantic information. The study developed a custom transliteration of Amharic texts into CV form using Amharic Alphabets. The approach can be adapted to develop stemmers for other resource-limited languages and is efficient for IR applications. However, the Amharic light stemmer may lack accuracy due to the affix list not being comprehensive enough. Related resources, including the code, will be accessible online for research communities. The study developed a custom transliteration of Amharic texts into CV form using Amharic Alphabets. The Amharic light stemmer may lack accuracy due to the affix list not being comprehensive enough. A hybrid approach or corpus-based methods should be incorporated to handle ambiguous prefixes and suffixes."
}