{
    "title": "r1ls4-DpvN",
    "content": "Influence diagrams provide a framework for sequential decision problems, representing probabilistic knowledge and agent preferences. MDPs and POMDPs can also be represented by influence diagrams. A weighted mini-bucket approach is developed in this paper to bound the maximum expected utility (MEU), which can be used as an approximation or heuristic function for planning under uncertainty. The scheme is evaluated empirically against state-of-the-art, showcasing its potential in decision problems like MDPs and POMDPs. An influence diagram (ID) is a graphical model for sequential decision-making under uncertainty, represented by a directed acyclic graph (DAG) over nodes. The standard query on an ID is finding the maximum expected utility (MEU) and the corresponding optimal policy. Recent work focuses on developing anytime bounding schemes to tighten bounds for computing the MEU, often used as heuristic functions to guide search algorithms. This paper specifically addresses computing the upper bound of MEU for a single agent sequential decision-making problem. The paper focuses on computing the upper bound of MEU for a single agent sequential decision-making problem using a methodology of weighted mini-bucket with cost-shifting. Upper bounding schemes for IDs involve decomposing the underlying graphical model or relaxing information constraints. Decomposition-based bounds involve extending the mini-bucket scheme to MEU tasks. The mini-bucket scheme for MEU tasks involves partitioning a cluster in the join-tree into mini-buckets with bounded variables. Dual decomposition schemes have been extended for mixed graphical models queries. Valuation algebra defines operators for probability and utility functions. Information relaxation allows flexible variable orderings in processing. The mini-bucket scheme for MEU tasks involves generating upper bounds on the MEU using a weighted scheme. These bounds can be used as heuristics for search algorithms in solving IDs efficiently. An ID consists of discrete random variables, decision variables, conditional probability functions, and utility functions. In an Influence Diagram (ID), there are chance nodes (circles), decision nodes (squares), and value nodes (diamonds) connected by directed edges representing conditional probability and utility functions. Decision nodes have parent nodes forming an information set. In an Influence Diagram (ID), decision nodes are associated with information sets denoting observed chance nodes before the decision. The constrained variable ordering ensures decision regularity and available information at each stage for the non-forgetting agent. Solving an ID involves computing maximum expected utility and finding optimal policies based on history. The valuation algebra for Influence Diagrams (IDs) computes expected utility values based on combinations and marginalization of potentials. Valuations are pairs of probability and value functions over a set of variables. The combination of two valuations is defined, with the identity being 1,0 and the inverse of the function is 1-{P,V}. The identity in the valuation algebra for Influence Diagrams is defined as 1,0 and the inverse as 1-{P,V}. Marginalization over variables can be done by summation, maximization, or powered-summation with weights. The comparison operator for valuations is a partial order based on the scopes. The valuation algebra notation defines an ID compactly as M: xX, \u03a8 \u03a8 \u03a8, Oy, where X \" C Y D and \u03a8 \u03a8 \u03a8 \" tpP i , 0q|P i P Pu Y tp1, U i q|U i P Uu. The MEU is written as \u00ff DISPLAYFORM0 with X \u03b1 denoting the scope of \u03a8 \u03b1. A primal graph FIG0 captures the dependence relation between variables. A minibucket tree is generated with a constrained elimination ordering D1, S2, S3, D0, S0, S1. Mini-buckets are created at bucket S2 by limiting the cluster size to 3. Non-negative weights wS 2 and w S 1 2 for variable S2 sum to 1. G p \" pV, Eq, where nodes V are variables and edges connect nodes with corresponding variables in function scopes. The mini-bucket scheme BID0 relaxes an exact tree decomposition BID3 by duplicating variables when the maximum clique size exceeds an i-bound parameter. The weighted mini-bucket elimination scheme BID11 tightens the mini-bucket relaxation using H\u00f6lder's inequality, reducing back to naive mini-buckets by assigning one weight to 1.0 for sum-marginal and all others to 0. The weighted mini-bucket elimination algorithm tightens the mini-bucket relaxation by assigning one weight to 1.0 for sum-marginal and all others to 0. Join-tree decomposition of a primal graph is generated by triangulating the graph along a constrained ordering compatible with the information constraints. The complexity of exact inference algorithms for solving the equation is exponential in the graph parameter called treewidth. The join-graph decomposition is an approximation scheme that decomposes cliques in a tree decomposition, creating clusters with bounded scope sizes. Nodes in the join-graph are associated with functions and variables, connected by edges labeled with separator sets. A valid join-graph must satisfy the running intersection property, connecting mini-buckets in a mini-bucket tree to form the join graph. The generalized dual decomposition scheme BID22 (GDD) provides upper bounds to the marginal MAP query by generalizing H\u00f6lder's inequality in a fully decomposed setting expressed by specific formulas and parameters. Reparameterized Decomposition Bounds tighten the upper bounds by introducing auxiliary optimization parameters to the decomposition schemes. The reparameterized bounds for the MEU task involve introducing auxiliary optimization parameters to the decomposition bounds, resulting in a reparameterization of the original functions. This includes cost shifting valuations and weight parameters distributed to each cluster, leading to a tightened MEU through minimizing the value component relative to the optimization variables. The decomposition bounds for IDs in Eq. (4) lack a convex form due to the combination of probability and value components, impacting the quality of upper bounds computed by optimization algorithms. The JGDID scheme experiences degradation in upper bound quality despite higher i-bound values, as the exponential increase in optimization parameters rapidly expands the parameter space. An alternative approach involves interleaving variable elimination and cluster decomposition/optimization on-the-fly during computation. The weighted mini-bucket elimination bounds for IDs (WMBE-ID) are developed based on the idea of optimizing a partial decomposition scheme for a single cluster of the join-tree. This involves applying a weighted mini-bucket decomposition for one variable at a time, sending intermediate messages to lower mini-buckets to tighten the upper bound. The introduction of auxiliary valuations between mini-buckets yields a parameterized bound for each bucket independently. The weighted mini-bucket elimination bounds for IDs (WMBE-ID) involve optimizing a partial decomposition scheme for a single cluster of the join-tree. It includes applying a weighted mini-bucket decomposition for one variable at a time and introducing auxiliary valuations between mini-buckets to tighten the upper bound. The parameterized upper bound to the weighted mini-bucket decomposition at Bucket S 2 is proposed, along with a surrogate objective function for minimizing the upper bound. The weighted mini-bucket elimination algorithm optimizes a partial decomposition scheme for a single cluster of the join-tree. It involves applying a weighted mini-bucket decomposition for one variable at a time and introducing auxiliary valuations between mini-buckets to tighten the upper bound. The exact MEU of the subproblem can be bounded by the weights of the variables in the mini-bucket partitioning. The weighted mini-bucket elimination algorithm optimizes a partial decomposition scheme for a single cluster of the join-tree by applying a weighted mini-bucket decomposition. The upper bound can be obtained by partitioning buckets into mini-buckets and applying a fully decomposed bound to each mini-bucket. The upper bound can be reparameterized by cost functions on the chain of mini-buckets before processing and sending messages. The algorithm initializes a schematic mini-bucket tree and allocates valuations. It partitions buckets into mini-buckets and combines valuations. It then evaluates the objective function and updates cost functions and weights for mini-buckets. Messages are sent between mini-buckets based on optimization parameters. The evaluation of upper bounds in weighted mini-bucket elimination requires reconfiguring the join-graph and weight parameters. Optimization objective evaluation does not need re-evaluation of all mini-buckets. Cost functions and weights are updated separately using optimization routines. Powered-sum elimination operator is defined over the absolute value of a function. The elimination operator is defined over the absolute value of a function, ensuring non-negativity of value components in mini-buckets after reparameterization. Optimization procedures can be applied to reparameterize the mini-buckets, with constraints on probability and value components. The weighted mini-bucket elimination interleaved with reparameterization computes the upper bound of MEU. Variables are processed in a specific order, partitioned into mini-buckets, and combined for valuation. The join-graph decomposition based bound is pre-computed using uniform weights. The cost functions and weights for mini-buckets corresponding to variable X i are updated to tighten the upper bound of the inequality. Messages from mini-buckets are computed by marginalizing reparameterized valuations. Performance of the proposed bounding scheme WMBE-ID is compared with earlier approaches on 4 domains with 5 problem instances each. Benchmark statistics are summarized in TAB1. The WMBE-ID algorithm is evaluated on Factored FH-MDP, Factored FH-POMDP, RAND, and BN instances in 3 different configurations: WMBE-U, WMBE-UC, and WMBE-WC. Earlier approaches are also considered for comparison. The WMBE-ID algorithm is evaluated on various instances using different configurations. Earlier approaches like MBE, MBE-Re, and JGDID are also implemented and compared in Python using specific libraries. WMBE-U, MBE, and MBE-Re are non-iterative, while WMBE-UC, WMBE-WC, and JGDID are iterative algorithms. The quality of upper bounds of 6 algorithms in various instances was evaluated. WMBE-ID consistently improved bounds with higher i-bounds, while MBE and MBE-Re had worse quality bounds. JGDID generated tight bounds but took more time. WMBE-WC produced better bounds than JGDID in some cases. In comparison to JGDID, WMBE-ID consistently improved upper bounds with higher i-bounds, producing tighter bounds in shorter time. WMBE-WC also outperformed JGDID on some instances. The WMBE-ID heuristic function can be pre-compiled for efficient computation, showing state-of-the-art performance in guiding search strategies. It computes upper bounds for influence diagrams by interleaving variable elimination and optimizing partial decomposition, producing high-quality bounds in shorter time. This bounding scheme is instrumental for solving IDs efficiently. The WMBE-ID heuristic function efficiently computes upper bounds for influence diagrams by optimizing partial decomposition, aiding in solving IDs efficiently. Table 2 compares performance of bounding schemes on individual instances, highlighting the best upper bounds. Table 3 compares time and quality ratios against JGDID(i=1) for various i-bounds and iterations. The WMBE-ID heuristic function efficiently computes upper bounds for influence diagrams by optimizing partial decomposition. WMBE-UC and WMBE-WC have i-bounds of 10 and 15 with 5 fixed iterations, while JGDID has i-bounds of 1 and 10 with a maximum of 100 iterations. Quantities are normalized by JGDID(i=1) for heuristic evaluation in search algorithms for influence diagram solving."
}