{
    "title": "rJVoEiCqKQ",
    "content": "Many real-world problems, like object detection, require outputs in the form of sets of entities. Traditional deep neural networks struggle with structured outputs, but a novel approach using deep neural networks can predict sets with unknown permutation and cardinality. This approach incorporates permutation as an unobservable variable and estimates its distribution during the learning process. The new formulation has been successful in object detection, outperforming state-of-the-art detectors, and in a CAPTCHA test where the set-based network learned arithmetic without coded rules. Deep structured networks like CNN and RNN have been successful in various real-world problems. However, these networks are limited to structured inputs and outputs, causing issues with unstructured data like sets. Set learning using deep networks is a new field that has gained interest recently. Object detection is a task where deep learning networks struggle to predict an unfixed number of orderless locations. Existing approaches use pre-defined grids or anchor boxes to represent all possible locations and scales of objects, scoring each independently. The final output is generated heuristically, hindering performance. Object detection is currently hindered by heuristic procedures like Non-Maximum Suppression (NMS), limiting performance with moderate object occlusion. The problem can be reframed as a set prediction task, removing the need for heuristics. This approach is beneficial for tasks involving sets of instances, such as object segmentation and multiple object tracking. Unlike classification, where categories are fixed, instances are unordered and variable in number. Training deep networks to predict instances in an orderless and numberless manner is challenging. Set learning is proposed as a solution to this problem. A novel approach for learning with sets using deep learning is presented in this paper, inspired by previous work on set learning. The approach handles orderless outputs in testing but requires ordered outputs in the learning step, which is a limitation for tasks like object detection where outputs are naturally not ordered. The paper proposes a new set prediction formulation to address the limitation of handling orderless outputs in tasks like object detection. It introduces a principled formulation for neural networks to deal with arbitrary sets with unknown permutation and cardinality, enabling the network to handle orderless outputs at both training and test time. Additionally, the formulation allows learning the distribution over unobservable permutation variables to identify the most likely orders of the set, even when dominant orders are unknown from annotations. The paper introduces a new set prediction formulation for object detection, treating it as a set prediction problem without heuristics. It outperforms existing detectors like Faster R-CNN and YOLO v2 on occluded data. The framework is also applied to a CAPTCHA test, showcasing its versatility in handling unstructured input and output data. Recent works have explored using deep neural networks to learn sets, with one exception using an RNN to predict sets but still assuming a single order. This framework is limited to RNNs and cannot easily be extended to other learning architectures. Recent works have explored deep learning frameworks for set learning, with limitations in handling output sets with arbitrary entities and permutations. A recent deep set network integrates deep learning into set learning but only formulates outputs with unknown cardinality and fixed order, limiting its application to specific problems like image tagging. This paper introduces a framework that can learn to predict sets with arbitrary entities and permutations, addressing limitations in existing approaches for object detection. The framework incorporates permutations as unobservable variables and estimates their distribution during the learning process. It has the potential to reformulate existing problems like object detection and tackle new applications such as logical CAPTCHA tests. The paper introduces a framework for predicting sets with arbitrary entities and permutations, addressing limitations in existing object detection approaches. It incorporates permutations as unobservable variables and estimates their distribution during learning, with potential applications in logical CAPTCHA tests. The framework defines sets with unknown cardinality and permutation, sets with known cardinality but unknown permutation, and ordered sets with known dimension and permutation. The paper presents a framework for predicting sets with arbitrary entities and permutations, overcoming limitations in object detection methods. It defines sets with unknown cardinality and permutation, sets with known cardinality but unknown permutation, and ordered sets with known dimension and permutation. The probability density of a set Y with unknown permutation and cardinality conditioned on input x and model parameters w is formulated, allowing for various applications. The paper introduces a framework for predicting sets with arbitrary entities and permutations, addressing limitations in object detection methods. It defines sets with unknown cardinality and permutation, sets with known cardinality but unknown permutation, and ordered sets with known dimension and permutation. The aim is to learn parameters to estimate the set distribution using training samples, assuming independence between samples and input data distribution. The posterior distribution over parameters is derived using the chain rule, eliminating the input data distribution. The paper introduces a framework for predicting sets with arbitrary entities and permutations, addressing limitations in object detection methods. It defines sets with unknown cardinality and permutation, sets with known cardinality but unknown permutation, and ordered sets with known dimension and permutation. The full posterior distribution is derived using the chain rule, eliminating the input data distribution. The posterior distribution can be written as DISPLAYFORM1 using categorical distributions for cardinality and permutation terms. The assumption of an i.i.d. cluster point process model is found practical for the reported applications, with potential for extension to non-i.i.d. models. Learning parameters involves using a point estimate for the posterior. The paper introduces a framework for predicting sets with arbitrary entities and permutations, addressing limitations in object detection methods. It defines sets with unknown cardinality and permutation, sets with known cardinality but unknown permutation, and ordered sets with known dimension and permutation. The full posterior distribution is derived using the chain rule, eliminating the input data distribution. The posterior distribution can be written as p(w|D) = \u03b4(w = w * |D), where w * is computed using the MAP estimator. The parameters of a deep neural network are estimated using stochastic gradient descent (SGD) with the most significant permutations for each training instance. The framework predicts sets with arbitrary entities and permutations, using alternating optimization and backpropagation to learn parameters of a deep neural network. The regularization parameter \u03b3 is used in the optimization process, with O2 representing the output layer predicting cardinality, states, and permutations of set elements. The best permutation \u03c0*i,k is found through discrete optimization. The best permutation \u03c0*i,k is found through discrete optimization to update the network parameters w* for training the deep neural network. The permutation sample \u03c0*i,k is used as ground truth to update the network's output layer and sort the elements of the ground truth set's state. During training, the Deep Perm-Set Network uses a permutation sample \u03c0*i,k as ground truth to update the network's output layer. The network predicts the cardinality, states, and permutation of set elements. During inference, the optimal set Y* is calculated using the cardinality and states outputs, with an additional output for ordering representation. During inference, the ordering of set elements does not affect the output values. The inference problem is similar to BID20 and can be efficiently calculated to find the most likely set. The hyper-volume unit U is a constant hyper-parameter estimated from the validation set. The distribution p m (\u03c0|\u00b7, \u00b7) is approximated during learning by samples \u03c0 * i,k from Eq. (5), which can be single modal, multimodal, or uniform. The proposed set prediction neural network utilizes a distribution over permutations for ordering representation. Experiments on object detection and CAPTCHA tasks validate the set learning approach. The model is compared with Faster-RCNN and YOLO v2 for pedestrian detection using the same base network structure (ResNet-101). The study compares the proposed set prediction neural network with Faster-RCNN and YOLO v2 for pedestrian detection using ResNet-101. The dataset used includes sequences from MOTChallenge benchmarks split into train and test subsets. The focus is on evaluating object detectors' handling of partial occlusions in small-scale data with 50K training and 5K test samples. The object detection is formulated as a set prediction problem with bounding boxes represented by elements in the set. A convolutional neural network based on ResNet-101 is trained with loss heads attached to the output. Three main terms need to be defined for this task, including state loss with smooth L1-loss for bounding box regression and binary cross-entropy loss for presence scores. The ground truth score is 1 for existence and 0 otherwise, with permutation estimated iteratively using Hungarian algorithm. The object detection task involves training a convolutional neural network with loss heads for bounding box regression and presence scores. Permutations are estimated using the Hungarian algorithm, and evaluation metrics such as ROC curves and average precision are used to assess detection performance. Training includes using Adam optimizer with specific parameters, batch normalization, and weight decay for regularization. The object detection task involves training a convolutional neural network with loss heads for bounding box regression and presence scores. Permutations are estimated using the Hungarian algorithm, and evaluation metrics such as ROC curves and average precision are used to assess detection performance. Training includes using Adam optimizer with specific parameters, batch normalization, and weight decay for regularization. The quantitative detection results for Faster-RCNN, YOLO v2, and our proposed detector are shown in Tab. 1, with F1 score being computed for all methods. Our detector generates a single set of bounding boxes, resulting in a single value for precision-recall and F1-score. The average precision and log-average miss rate cannot be reported in this case, and the F1-score reflects the best score for Faster-RCNN and YOLO v2. Our detector using the set formulation outperforms other approaches on all metrics, handling heavy occlusions without NMS heuristics. Changing the overlap threshold for NMS would not improve detection performances. Our set-based detector outperforms YOLO v2 and Faster-RCNN in detecting objects with severe occlusion, showing a 5-15% improvement in F1 score. The ROC and precision-recall curves demonstrate our detector's superior performance, with the highest F1-score and lowest miss rate. This is significant as our network is not specifically designed for detection tasks, unlike YOLO v2 and Faster-RCNN. Additionally, our set formulation is evaluated on a CAPTCHA test for human verification. The study focuses on a CAPTCHA test involving a complex logical puzzle where users decompose a query digit into a set of digits by selecting numbers in a noisy image. The training data consists of spotted locations in the image, with no information on the values represented. The dataset for the test is generated from the MNIST dataset. The dataset for the CAPTCHA test involves generating problem instances using the MNIST dataset of handwritten digits. Random digits are selected to sum up to a query digit, with added white noise for complexity. The dataset includes 100K training instances and 10K evaluation images. The problem involves selecting specific numbers as objects of interest based on a query digit, making it different from traditional object detection tasks. An attempt to solve the CAPTCHA problem using a detector like Faster-RCNN with the same data and network structure did not work. The experiment involves training a network (ResNet-101) to detect and localize numbers that sum up to a query digit. The network outputs bounding boxes for the solution set, with a hyper-parameter U set to 2. Evaluation is done by comparing predicted bounding boxes with ground truth. The experiment involves training a network (ResNet-101) to detect and localize numbers that sum up to a query digit. The network outputs bounding boxes for the solution set, with a hyper-parameter U set to 2. Evaluation is done by comparing predicted bounding boxes with ground truth. The accuracy of the set prediction approach is 95.6%, while the Faster-RCNN detector only achieved 26.8% accuracy due to its inability to reason and understand the logical relationship between objects. The paper proposes a framework using convolutional neural networks to predict sets with unknown cardinality and permutation. Set permutation is treated as an unobservable variable, and object detection is framed as a set prediction problem. The network can generate different sets with varying states and cardinality based on input changes, showcasing the potential to solve arithmetic, logical, or semantic relationship problems without explicit knowledge. The approach uses deep learning to generate detection outputs without heuristics, outperforming state-of-the-art object detections. It also effectively solves complex logical CAPTCHA tests by selecting digits with equal sum values. The main limitation is the exponential growth of permutations with set size, but future plans include learning significant permutations for large-scale problems like multiple object tracking. The appendix provides additional information on the synthetic dataset used for object detection, including detailed results and comparisons. It also demonstrates how the approach can detect and identify similar object instances across test data. Additionally, it includes an experiment showing the limitations of training the set network for object detection. Furthermore, extra analysis and experiments on CAPTCHA tests are presented. The synthetic dataset for object detection includes 50000 training images and 5000 testing images. Each image has a central crop from a COCO 2014 background with 0 to 4 randomly rendered objects. Objects are ellipsoids of varying colors and brightness, with severe overlap allowed to increase challenge. Our detector using the set formulation outperforms all other approaches in detecting objects with severe occlusion, showing a 20% improvement in F1 score compared to YOLO v2 and Faster-RCNN for overlap levels above 0.5. The ROC and precision-recall curves also demonstrate the superior performance of our formulation. Our detector outperforms Faster-RCNN and YOLO v2 in detecting objects with severe occlusion, showing a 20% improvement in F1 score for overlap levels above 0.5. The detection results on synthetic data are shown in Table 2, measuring average precision, F1 scores, and log-average miss rate. Additionally, our approach provides the best ordering representation for bounding boxes, finding associations between similar instances across different images without prior knowledge of correspondence. Our approach excels in detecting and identifying object instances using permutations and color coding for the same ID. It allows for simultaneous detection and identification of similarly looking instances in different test examples, without assuming a fixed labeling representation. The number of identifiable unique instances depends on the maximum number of set elements outputted from our network. Evaluation is done using associations between similarly looking objects from simulated data. Our approach excels in detecting and identifying object instances using permutations and color coding for the same ID. Evaluation is done using associations between similarly looking objects from simulated data, achieving 81.1% accuracy. The joint detection and identification of objects is a fundamental step towards end-to-end training for multiple object tracking. However, handling large-scale object tracking problems with exponential permutations remains a challenge for future work. The experiment involved training a set network on synthetic data using ResNet-101. The set network's losses could not decrease beyond a high value, resulting in ineffective model learning for object detection. The model failed due to not considering permutations, leading to confusion in training with orderless outputs like bounding boxes. The predicted bounding boxes were concentrated in the same location, indicating the model's inability to learn effectively. The experiment involved investigating the accuracy of solving CAPTCHA tests using Faster-RCNN. Changing the detection threshold had a slight effect on test accuracy, increasing it from 26.8% to 31.05%. Additionally, a ResNet-101 network trained on the MNIST dataset was used to recognize digits in combination with Faster-RCNN to improve test accuracy. The dataset annotations only included bounding boxes without information on the query digit or set of digits. The experiment involved using Faster-RCNN to solve CAPTCHA tests. A new classifier network was trained to recognize query digits and detected numbers. Test accuracy increased from 31.05% to 59.28%, but still below the reported 95.2%. Faster-RCNN detected most digits accurately. Faster-RCNN improved CAPTCHA test accuracy by detecting most digits accurately, but it ignored the logical relationship between the query digit and the set of digits."
}