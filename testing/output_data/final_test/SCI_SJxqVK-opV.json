{
    "title": "SJxqVK-opV",
    "content": "We propose a method for learning unknown constraints shared across tasks using demonstrations, cost functions, and system dynamics. Safe and unsafe trajectories are used to obtain a consistent representation of the unsafe set. Our method can learn parametric constraints in high dimensions, demonstrated with a six-dimensional pose constraint for a 7-DOF robot arm. Inverse optimal control and inverse reinforcement learning enable robots to perform complex tasks by learning a cost function from expert demonstrations. The behavior of an expert demonstrator is optimized for robotics and automation tasks, requiring knowledge of constraints for safe states and trajectories. Existing methods approximate constraints through trajectory-based learning or cost penalties, but recent work has shown a method to extract globally-valid constraints from expert demonstrations. This learned constraint can inform planners to generate safe trajectories for new start and goal states, although scalability is limited by gridding in higher dimensions. The workshop paper introduces a method to extend BID2 to higher dimensions by writing a mixed integer program over parameters to recover a constraint consistent with the data. The method is evaluated by learning a 6-dimensional pose constraint on a 7 degree-of-freedom robot arm. The problem statement involves a state-control demonstration steering a control-constrained system from a start state to a goal state while minimizing cost and obeying safety constraints. The demonstration solves a problem where known functions map to constraint spaces with subsets considered safe. The paper discusses learning the unsafe set A in a system with known dynamics, control constraints, and start/goal constraints. It uses safe, optimal demonstrations to identify lower-cost unsafe trajectories, which are then used to reduce the number of consistent unsafe sets. An integer program is employed to find a gridded representation of A that is consistent with both safe and unsafe constraints. The integer program finds a gridded representation of A consistent with safe and unsafe trajectories. Sampling from lower-cost trajectories that are dynamically feasible and satisfy control constraints. Sampling from A \u03be using hit-and-run for a uniform distribution of samples. Constraint space C is gridded into cells, recovering safety values for each cell consistent with safe and unsafe trajectories. The integer program finds a gridded representation of A consistent with safe and unsafe trajectories by solving Problem 2. The constraints ensure that cells passed by demonstrations are safe and at least one grid cell in unsafe trajectories is marked unsafe. Feasibility is checked by adding constraints to force unsafe cells to be safe. Unsafe set parameterization A(\u03b8) is used to find feasible parameters \u03b8. The feasibility problem, similar to Problem 2, aims to find a feasible \u03b8 consistent with the data. The set of guaranteed learned safe and unsafe constraint states, denoted as G s and G \u00acs, can be checked by enforcing specific conditions. A common parameterization for an unsafe set is as a polytope A(\u03b8) = {k | H(\u03b8)k \u2264 h(\u03b8)}, where \u03b8 can be found by solving a mixed integer feasibility problem. In this example, a 6D hyper-rectangular pose constraint is learned for a 7-DOF Kuka iiwa arm to pick up a cup and bring it to a human. The feasibility problem aims to find a feasible \u03b8 consistent with the data, with sets of guaranteed safe and unsafe constraint states checked by enforcing specific conditions. A mixed integer feasibility program can be solved to find \u03b8 when the safe set is a polytope or a union of polytopes. Additionally, a probability distribution over possibly unsafe constraint states can be estimated by sampling unsafe sets from the feasible set. The Kuka iiwa arm is tasked with picking up a cup and delivering it to a human while maintaining proxemics constraints. Trajectory optimization problems are solved in 7D joint space to ensure the cup's contents do not spill. The end effector orientation is constrained using Euler angles, and Problem 4 is solved in 1.19 seconds on a 2017 Macbook Pro to recover the true \u03b8 and G s efficiently. In this paper, BID2 is extended to learn higher dimensional constraints using a known parameterization. The constraint recovery problem for the parameterized case can be solved with mixed integer programming. The method is evaluated on learning a 6D pose constraint for a 7-DOF robot arm. Future work includes using learned constraints for safe planning and developing exploration strategies to reduce uncertainty."
}