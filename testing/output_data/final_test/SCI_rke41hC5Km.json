{
    "title": "rke41hC5Km",
    "content": "We propose using generative adversarial networks to create realistic stock market data by modeling order streams as a stochastic process with finite history dependence. A conditional Wasserstein GAN is employed to capture the history dependence of orders in the stock market. Financial markets are complex multiagent systems critical to the global economy. Accurate modeling supports market design and regulation. Agent-based models offer dynamic complexity but lack high-fidelity market data simulation. Our aim is to develop a high-fidelity market data simulation model using a Wasserstein generative adversarial network (WGAN). This approach overcomes challenges in representing stock market orders as data for the WGAN, assuming a stochastic process with long memory dependence. The model learns the conditional and joint distributions to produce realistic stock market data. The critic of the WGAN distinguishes distribution by estimating earth-mover distance. A conditional WGAN is chosen to capture history dependence, with LSTM summarizing history. Generator and critic use standard convolutional structure. Generator outputs next stock market order and updates active orders. Experimentation done with synthetic and real market data using a stock market simulator. The study evaluates generated stock market data using various statistics and finds it closely matches real data. WGAN, a variant of GANs, is commonly used for sequence generation, but producing high-quality text remains a challenge due to the non-continuous nature of word representations. Generating good quality text using GANs is an active research area, while stock market data does not face the same representation issue. BID15 introduced GAN-based methods for generating point processes, focusing on predicting the time for the next event. These techniques have also been applied to generating transaction events in stock markets. The goal is to generate detailed limit orders, including time, order type, price, and quantity information, rather than market prediction. Deep neural networks and machine learning have been used for financial data analysis, primarily for predicting transaction prices and returns. The emphasis is on market modeling rather than prediction. The stock market operates on a continuous double auction mechanism where traders submit bids or limit orders. Orders are maintained in the order book until they are transacted or canceled. When a new order matches an existing order, the trade is executed immediately at the price of the existing order. The stock market operates on a continuous double auction mechanism where traders submit bids or limit orders. Orders may be submitted at any time, and a buy order matches and transacts with a sell order when the limits of both parties can be mutually satisfied. The limit order book maintains the current active orders in the market, recorded as updates to the order book after each order arrival. The stock market operates on a continuous double auction mechanism where traders submit bids or limit orders. Orders may be submitted at any time, and a buy order matches and transacts with a sell order when the limits of both parties can be mutually satisfied. The order book is approximated by price levels above the best bid and below the best ask, dictating transactions in the market. Various traders participate in the market, from individual investors to large firms, submitting a wide range of orders for a security. The focus is on generating orders that mimic those in a real market, without generating actual transactions. The stock market orders are modeled as a stochastic process with random variables indexed by order sequence numbers. Each order includes time interval, type of order, price, quantity, best bid, and best ask. Time interval specifies the difference in time between orders, order types can be buy, sell, cancel buy, or cancel sell, and prices and quantities are within finite bounds. The stock market orders are modeled as a stochastic process with random variables indexed by order sequence numbers. Prices and quantities are discretized in units of US cents and non-negative integers respectively. Time is divided into 25 intervals, with \u2206t representing the interval index. The process is discrete time and space, with a finite history dependence on the current output x i. The stock market orders are modeled as a stochastic process with recent orders determining transactions and prices. The best bid and ask serve as sufficient statistics, forming a higher order Markov chain. The process is assumed to have a stationary distribution after an initial mixing time. The stock market orders are modeled as a stochastic process with recent orders determining transactions and prices. The process is assumed to have a stationary distribution after an initial mixing time. A conditional WGAN with a recurrent architecture is designed to learn the real conditional distribution P r (x i | x i\u22121 , . . . , x i\u2212k , \u2206t) where k = 20. The real data sequence x i , . . . x i\u2212k is correlated with overlapping sequences x i+k , . . . x i\u2212k+k for k \u2265 k \u2265 \u2212k. Training data consists of sequences x i , . . . x i\u2212k, chosen to be sufficiently far apart in batches. The architecture includes a conditional WGAN with a recurrent design, where both the generator and critic are conditioned on a k length history and time interval \u2206t. The history is condensed to one vector using a single LSTM layer, followed by a fully connected layer and convolutional structure. The generator outputs the next x i and the critic outputs a real number during training. The CDA network is used to output the best bid and ask, trained separately with MSE loss. The critic function is based on real data sequences and weights w. Samples spaced at least k apart are considered i.i.d. samples of P r. The critic computes the Wasserstein distance between joint distributions of real and generated data. A gradient penalty term is used instead of weight clipping for better performance. The generator learns the conditional distribution and loss functions used are standard WGAN loss. The Stock-GAN model is evaluated on synthetic orders from an agent-based market simulator and real stock market data. The training data is constructed with unique sequences of orders in each mini-batch. Key metrics and distributions of generated orders are compared with ground truth orders. The market simulator used in the study captures stylized facts of financial markets with specified stochastic processes and distributions. Agents enter the market based on a Poisson process with an arrival rate of 0.005, submitting limit orders indicating their buying or selling price. The market has 32 traders with individual valuations for the security, including a fundamental value that changes over time. The fundamental value of a security changes over time in a mean-reverting stochastic process. Private valuations, representing individual preferences for trading, are drawn from a specified distribution at the start of a simulation. Agents accumulate private value on transactions and evaluate their inventory based on a prediction of the end-time fundamental. Traders execute trading strategies, such as the zero-intelligence (ZI) strategy, in the market environment. The ZI trading strategy in the simulator involves shading bids randomly. Synthetic data from the simulator is used, with price output normalized to [-1, 1]. Real limit-order streams from OneMarketData are also utilized. Stock-GAN performance is evaluated on Patriot National (PN) and Alphabet Inc (GOOG) stocks, which differ in various aspects like market activity intensity and liquidity. Stock-GAN is trained with historical data for individual stocks to generate limit-order streams capturing key characteristics. Focus is on limit orders near the best bid and ask prices, eliminating noisy orders far from the relevant range. Historical real market data of PN and GOOG is used, with PN having about 20,000 orders and GOOG having about 230,000 after preprocessing. After preprocessing, the generated order stream is evaluated using statistics such as price distribution, quantity distribution, inter-arrival time distribution, intensity evolution, and best bid/ask evolution. Cancellation orders are matched to the closest priced order in the book during the generation process. The study evaluates the generated order stream by analyzing price distribution, quantity distribution, and inter-arrival time distribution. Cancellations are matched to the closest priced order in the book, with results showing close matches for simulated data and GOOG, but slight discrepancies for PN due to limited data. In the study, the analysis of the generated order stream shows discrepancies in price distribution and inter-arrival time distribution for PN compared to GOOG and simulated data. The best bid/ask changes over time are shown for PN and GOOG markets, with GOOG displaying better similarity to real data. The price distribution appears normal, and the inter-arrival time distribution resembles a geometric distribution. Total variation distance comparisons are made between real and fitted distributions. The study compares the generated price and inter-arrival time distributions with real and fitted data. The generated inter-arrival distribution closely matches the real one, while the generated price distribution is almost as close as the fitted one. The architecture was iteratively developed to improve results, with the input of \u2206t being critical for the generator and critic. The input of \u2206t is crucial for the generator and critic to capture the time trend in the intensity for the GOOG stock. The CDA network and historical best bid/ask were incorporated to enhance bid/ask variation. Comparison with a variational recurrent generative network showed our approach outperformed. GANs can effectively simulate stock markets, but further research is needed to optimize network size and output cancellations intelligently. Our work explores the intersection of deep learning and finance, specifically focusing on buy and sell order cancellations. Results show similarities to earlier buy and sell results. Using a recurrent VAE, we analyze market activities for GOOG. Modifications were made to the baseline generative model to improve results, including using MSE loss and adjusting the neural network structure. The neural network structure was modified to be compatible with the problem, including changing the loss function to MSE. Results for GOOG buy orders showed high output entropy and worse performance compared to the GAN. The fake price distribution was wider than the real one, and the inter-arrival distribution was almost uniform. The quantity distribution matched the real one, similar to the GAN approach. The neural network structure was modified to be compatible with the problem, including changing the loss function to MSE. Results for GOOG buy orders showed high output entropy and worse performance compared to the GAN. The fake price distribution was wider than the real one, and the inter-arrival distribution was almost uniform. The quantity distribution matched the real one, similar to the GAN approach. The intensity distribution is somewhat close to the real intensity. The results are similar for other types of orders. The Generator structure includes the trained CDA network with inputs for noise, history orders features, and LSTM output."
}