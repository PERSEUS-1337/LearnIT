{
    "title": "SkxEtOGIqE",
    "content": "The verification of planning domain models is essential for ensuring the safety and correctness of planning-based automated systems. Model checking techniques are typically used for this task, but they can lead to false positives. This paper discusses the drawbacks of unconstrained planning domain model verification and proposes a fail-safe approach to design models that guarantee plan safety. By utilizing model checkers and state trajectory constraints planning techniques, unreachable counterexamples can be avoided during the verification process. Automated systems for planning and task scheduling are crucial in various domains like space missions, search and rescue, and logistics. Verification methods are essential to ensure the safety and correctness of these systems. Studies have been conducted on verification techniques, such as scenario-based testing and model-based validation. Failure of these systems could have catastrophic consequences, making robust and systematic verification methods necessary. The research focuses on verifying the safety of autonomous science agent design deployed on Earth Orbiter 1 spacecraft. Planning systems consist of domain models, planners, plans, executives, and monitors. Domain models describe real-world actions and errors in modeling could lead to planner failure. This paper addresses the vulnerability of verification methods for planning domain models to false positive counterexamples, which can lead to unrealistic or unsafe plans. The proposal suggests using planning goals as constraints during verification to overcome these deficiencies. The paper introduces goal-constrained planning domain model verification to eliminate unreachable counterexamples. It guarantees reachable counterexamples for safety properties if they exist. Two methods are demonstrated for this verification: using model checkers and state trajectory constraints planning techniques. This work promotes fail-safe planning domain model design and is the first to propose goal-constrained planning domain model verification. The paper discusses goal-constrained planning domain model verification, contrasting it with related work and addressing the issue of unreachable counterexamples. It proposes a design practice to ensure domain model safety and presents a verification concept that avoids returning unreachable counterexamples. The implementation of this concept on the Cave Diving planning domain using Spin and MIPS-XXL is also discussed. The paper discusses using model checkers and planners for domain model verification by translating the system model into a planning domain model. The goal is to find a plan that acts as a counterexample to the safety property. State trajectory constraints are used to restrict counterexamples and achieve the planning goal while falsifying the safety property. Unlike previous methods, the negation of the safety property is represented as a state trajectory constraint in this verification approach. Our work focuses on investigating the interaction between property testing and the original planning goal. Unlike previous methods, we use state trajectory constraints to ensure that the planning goal is achieved while falsifying the safety property. This differs from BID16's approach, which translates specification properties into trap formulas for testing individual atomic propositions without considering the interaction with the planning goal. Our work investigates the interaction between property testing and the planning goal. State trajectory constraints are used to ensure testing of the property while achieving the planning goal. Unlike other methods, our approach guarantees verification without the need for a complete planner. This contrasts with Goldman, Kuter, and Schneider's use of classical planners for verifying plans rather than domain models. Their work focuses on verifying single plan instances, while our method verifies all instances for a specific planning problem. Our method differs from previous studies in two aspects: defining the planning domain model verification problem and using model checkers for verification. We consider verification to be constrained by a specific goal and initial state pair, unlike ungrounded verification in other studies. The method differs from previous studies by defining the verification problem with a specific goal and initial state pair. Unlike ungrounded verification, our approach ensures that counterexamples returned by the model checker are reachable by any sound planner. Additionally, we augment the model transitions with the negation of the goal to force the model checker to terminate once the goal is reached, preventing the return of counterexamples that falsify the model. The modification in the verification process prevents the model checker from returning counterexamples that falsify the property after reaching the goal. Unconstrained verification aims to find a sequence of actions that can falsify the property, regardless of other conditions, without considering if it is a valid plan. This oversight can lead to critical issues when solving specific planning problems. In the context of planning problems, unreachable counterexamples that do not achieve the planning goal may be pruned away by the planner. An example using a modified microwave oven scenario illustrates this concept. While unconstrained verification may identify StartOven as a counterexample leading to an error state, the planner will not consider this sequence if it does not achieve the goal of heating. Counterexamples that are unreachable by planners exist in the literature. For example, BID18 used the Spin model checker to verify whether a planning domain model would permit an automated planning system to select plans that would waste resources and not meet the mission's science goals. They expressed the requirement as \"five data-producing activities must be scheduled by any returned plan.\" The planner's goal is to schedule five data-producing activity instances. The planner's goal is to schedule five data-producing activity instances. A counterexample was found by the model checker where data-consuming activities were scheduled before data-producing activities, leading to a full data buffer and a missing task. However, this counterexample would not be generated by a sound planner as it does not achieve the planning goal. Unreachable counterexamples pose a problem as they may be found by goal-ignorant model checkers but would be pruned during a planner's goal search. To address the issue of unreachable counterexamples misleading designers in domain model verification, a goal-constrained approach is proposed. By using the planner's goal and initial state as constraints, counterexamples can be verified to falsify properties while achieving the planning goal. This method ensures more accurate domain model verification compared to unconstrained methods. Additionally, an inherently safe domain model design practice is described to enhance the verification process. An inherently safe domain model design practice is described to ensure that plans produced by verified domains meet a given specification. Plan constraints are extracted from the specification and included in the domain model to prevent any violations. This approach was first proposed in 2005 but dismissed due to limitations in PDDL 2.2. An extension to the language, PDDL3.0, was introduced in IPC-5 to allow for the expression of plan state trajectory constraints. The competition (IPC-5) introduced a system example with specific constraints on image uplinking. Including these constraints in the domain model ensures plans meet the specification, acting as a safety defence layer. However, this method may not detect errors in the domain model, only preventing them from affecting generated plans. The method of including plan constraints in the domain model acts as a safety defence layer to prevent property violations. However, undetected bugs in the domain model could restrict the planner unnecessarily, requiring further verification efforts to reveal and rectify errors. Extracting formal properties from the specification and inserting them as constraints in the domain model is a small investment for guaranteed safe plans. Goal-constrained verification, introduced in the next section, can deliver safe and error-free models. Goal-constrained verification of planning domain models ensures safety by verifying that plans satisfy a given safety property. This task uses advanced search algorithms to find valid counterexamples that can falsify the safety property while achieving the planning goal. Goal-constrained verification of planning domain models ensures safety by verifying that plans satisfy a given safety property. Valid counterexamples are sought to falsify the safety property while achieving the planning goal. A plan is considered redundant if it contains a subsequence that achieves the goal. The goal-constrained verification of planning domain models ensures safety by seeking valid counterexamples that falsify the safety property while achieving the planning goal. Valid counterexamples are non-redundant plans that exclude unnecessary action sequences. The verification problem is defined as a tuple with a formal safety property, goal, and initial state to ensure returned counterexamples are valid. The concept of goal-constrained verification in planning domain models involves defining safety properties and ensuring that valid paths achieve the goal. Model checkers are used to verify safety properties by searching for counterexamples that do not achieve the goal, which are then eliminated as unreachable by the planner. To ensure valid counterexamples, safety properties are negated and combined with planning goals. The model checker is then tasked with finding counterexamples that falsify the safety property but satisfy the planning goal. Transition models are adjusted to prevent sequences that falsify the property after achieving the goal. This modification forces the model checker to return counterexamples that violate the safety property before reaching the goal. The model checker is modified to find counterexamples that violate the safety property before reaching the goal. The verification problem involves translating the domain model and applying the model checker to establish the outcome. The model checker is modified to find counterexamples violating the safety property before reaching the goal. If a counterexample is found, the DUV does not satisfy the safety property. If no counterexample is found, the DUV satisfies the original property. Goal-constrained planning domain verification ensures that domain models only produce valid plans that satisfy a given property for a specific goal and initial state. By consulting a planner, plans can be generated to satisfy the goal and negate the property. If the model allows for unsafe plans that contradict the safety property, a counterexample is found. If no unsafe plans can be generated, the property holds. This approach uses a planner to verify the domain model. Planning domain verification is performed using a planner, which does not need to be complete as long as it is the same planner used for the planning task. State trajectory constraints can be used to verify planning domain models for a specific goal and initial state by expressing the negation of a property using PDDL3.0 modal operators. The planning domain verification involves using a planner to verify the model with state trajectory constraints. The model is modified with safety property negation expressed in PDDL3.0 modal operators. The new model is transformed into a PDDL2 compatible version by translating the state trajectory constraint into a non-deterministic finite state automaton. The model is modified to simulate the behavior of an automaton representing a constraint, creating a new planning problem. If a planner finds a plan, it confirms that there is at least one plan that achieves the goal without respecting the safety property, making it a valid counterexample. This shows that the DUV does not satisfy the property with respect to the planning goal. In goal-constrained planning domain verification, safety properties are verified using the Spin model checker and the MIPS-XXL planner. The example of a cave diving planning domain is used to demonstrate this process, showing how plans satisfy the safety property in the given goal and initial state. Unlike unconstrained verification tasks, this method does not return unreachable counterexamples. The underwater cave system for divers has interconnected locations where they can swim between with oxygen tanks. Divers must perform a decompression manoeuvre at the entrance before surfacing. The planning goals involve taking a photo at a specific location (mission target) and ensuring divers return safely to the surface. The safety target for divers mandates that they should not drown, ensuring they have at least one full oxygen tank when not at the entrance. The planning domain model was simplified by ignoring certain conditions to focus on verifying the drowning safety property. Modifications were made to enable the diver to return to the water after a dive, with details provided in the planning files available online. The domain model was translated from PDDL to Promela for verification. The planning domain model was translated from PDDL to Promela for verification. The chosen planning goal is to have a photo of the first location and get the diver outside the water. Verification tasks include unconstrained verification with only the safety property, leading to a counterexample where the diver ends up in a drowning state. This counterexample does not achieve any useful goal and will not be produced by a sound planner. Verification with safety property and incomplete goal (mission target only): Spin and MIPS-XXL returned a counterexample that achieves the goal but violates the safety property. Plans that imply divers should swim to an underwater location and take a photo without returning to the surface are illegal and unreachable. Such sequences will never be produced by a sound planner for a legal goal. The presented paper discusses the verification of a planning domain model with safety property and incomplete goal. The analysis shows that no plan violating the safety property before achieving the goal is produced by the planner MIPS-XXL or Spin in exhaustive verification mode. This indicates that the model is safe in this regard. The paper discusses the verification of planning domain models to ensure safety in automated systems. Unreachable counterexamples in incomplete verification tasks can be critical and difficult to recognize. The proposed concept aims to save practitioners time by avoiding unnecessary alterations to planning domain models. Goal-constrained verification is introduced as a new concept to address potential deficiencies in planning domain model verification. This approach restricts the verification task to a specific goal and initial state pair, ensuring that counterexamples are practically reachable by a planner. By using model checkers and planning techniques, goal-constrained planning domain model verification can be performed. Additionally, a safe practice for domain model design is recommended to guarantee safety \"by construction\" in case of undetected modeling errors. The paper emphasizes the importance of goal-constrained domain model verification to ensure accurate results and complement safe domain model design practices. It warns against relying solely on verification algorithms, as they may produce misleading counterexamples. The proposed solution is simple, effective, and currently being investigated for automation. The paper emphasizes the importance of goal-constrained domain model verification and proposes methods for automation and empirical comparison to assess scalability and performance."
}