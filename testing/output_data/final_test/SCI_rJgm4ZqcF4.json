{
    "title": "rJgm4ZqcF4",
    "content": "The text describes three approaches for enabling a computationally limited embedded scheduler to consider alternative activities based on resource availability. These approaches involve precompiled resource checks, mimicking backtracking, and evaluating techniques on mission scenarios from NASA's next planetary rover. The goal is to include these techniques in an onboard scheduler for embedded systems with limited computational resources. In this paper, three algorithms are presented to enable a scheduler to consider preferred activities while still scheduling all mandatory activities. Preferred activities are grouped into switch groups, each containing activities with varying resource consumption. The goal is to schedule the most desirable activity without sacrificing any mandatory activity, for use onboard the NASA Mars 2020 rover. The target scheduler for the NASA Mars 2020 rover is a non-backtracking scheduler that prioritizes activities in a first-order manner and does not backtrack once an activity is scheduled. It aims to prevent excessive resource usage during scheduling to ensure that mandatory activities can still be accommodated. The scheduler is designed to be robust to run-time variations by rescheduling activities multiple times if needed. The algorithms for scheduling switch groups must also be adaptable to changing resource consumption. The algorithms for scheduling switch groups must be robust to varying execution durations and rescheduling. Several approaches have been developed, including guards to reserve sensitive resources and emulating backtracking under certain conditions. These techniques are being considered for implementation in the Mars 2020 onboard scheduler, which prioritizes activities based on scheduling priority, nominal duration, and unit resources. The scheduler for activity A i considers unit resources, rates of resource consumption, non-depletable resources, start time windows, and activity dependencies. Scheduling priority determines the order of activities, with higher priority activities being scheduled first. The goal is to schedule all mandatory activities and switch cases while respecting constraints. The scheduler prioritizes activities based on priority order, where higher priority activities can block lower priority ones. Mandatory activities must be scheduled, and activities can be grouped into switch groups with varying resource consumption. It is mandatory to schedule one switch case and preferable to schedule a more resource-intensive one without sacrificing a mandatory activity. The scheduler prioritizes activities based on priority order, where higher priority activities can block lower priority ones. Mandatory activities must be scheduled, and activities can be grouped into switch groups with varying resource consumption. For example, one of the Mars 2020 instruments takes images to fill mosaics of different sizes, such as 1x4, 2x4, or 4x4. It is preferable to schedule a larger mosaic, but this takes more time, energy, and produces more data volume. The scheduler aims to schedule a 4x4 mosaic first, then a 2x4, and finally a 1x4 if necessary, without sacrificing lower priority mandatory activities due to resource constraints. The scheduler prioritizes activities based on priority order and groups them into switch groups to manage resource consumption. Activities in switch groups must be scheduled strategically to avoid conflicts with lower priority mandatory activities. The paper discusses scheduling switch groups strategically to avoid conflicts with lower priority mandatory activities. It also outlines energy constraints that must be satisfied during scheduling and execution, presenting different approaches to handle dependencies and evaluate their effectiveness. The rover's energy level fluctuates as it alternates between being awake and asleep during scheduled activities. Energy constraints such as Minimum State of Charge and Maximum State of Charge must be considered to preserve battery life and avoid performance issues. The scheduler must ensure that the energy level does not fall below the Minimum SOC at any point and does not exceed the Maximum SOC to prevent long-term battery damage. The rover's energy level fluctuates between being awake and asleep during activities, with energy constraints like Minimum and Maximum State of Charge to preserve battery life. To prevent exceeding the Maximum SOC, the rover may be kept awake, and two guard methods, Fixed Point and Sol Wide, are used to schedule switch cases by reserving time and energy for mandatory activities. The methods differ in how they ensure enough energy is reserved. The Sol Wide guard reserves energy by tracking the energy balance in the plan. Data volume is not considered a constraining resource. Time and energy guards are calculated offline using a nominal schedule. Constraints are applied during execution to ensure future activities can be scheduled. Rescheduling with a more consumptive switch case is possible if resources are freed up early. The Fixed Point and Sol Wide guards ensure enough time is reserved for scheduling. The Fixed Point and Sol Wide guards ensure enough time is reserved for scheduling remaining activities, including more resource-consuming switch cases. The scheduler prioritizes activities based on preferred times or schedules them as early as possible. Time constraints are adjusted for resource-intensive switch cases to complete by a specified time. The scheduler adjusts time constraints for resource-intensive switch cases to complete by a specified time, using a preferred time method to loosen constraints and allow for more flexibility in scheduling. The scheduler adjusts time constraints for resource-intensive switch cases using a preferred time method to allow for more flexibility in scheduling, potentially leading to wider start time windows for higher level switch cases. Placing the nominal switch case as late as possible may use up time from another mandatory activity with a tight execution window. State of Charge Guard The Fixed Point method ensures that scheduling a resource-intensive switch case will not violate the Minimum SOC by reserving enough energy at a fixed time point, T Nominal. The guard value for the Minimum SOC is set at T Nominal to constrain the scheduler from falling below this energy level. If an activity ends early, the scheduler can use the leftover energy to accommodate a more consumptive switch case without exceeding the available energy. The scheduler ensures that extra energy needed for a switch case does not exceed the Energy Leftover from the nominal schedule. Switch groups are managed to maintain energy levels, with the Sol Wide handover SOC guard preventing energy dips below a certain level. The scheduler calculates energy needed for remaining activities without considering Maximum SOC constraint to accurately predict energy balance. The difference between energy levels before and after scheduling activities is used to determine the energy needed. After scheduling activities, the energy level is calculated as E2. A constraint ensures that the energy level after scheduling a higher switch case must be above a certain value to prevent falling below the Minimum Handover SOC. A Monte Carlo simulation is used to determine if a longer switch case could cause the energy to drop below the Minimum SOC, and adjustments are made accordingly. The Monte Carlo simulation is used to adjust the guard constraint in Equation 5 based on the execution of mandatory activities. The Sol Wide energy guard value is increased if a more resource consuming switch case is executed before a mandatory activity is completed in the nominal schedule. The Multiple Scheduler Invocation (MSI) approach emulates backtracking by reinvoking the scheduler multiple times. The Multiple Scheduler Invocation (MSI) approach emulates backtracking by reinvoking the scheduler multiple times during execution. The scheduler reschedules with only the nominal switch case until an MSI trigger is satisfied, attempting to schedule higher level switch cases if necessary. If activities end early, the schedule is regenerated with the nominal switch case. The schedule is regenerated with the nominal switch case to generate a more consumptive switch case if activities end early. Factors to consider when implementing MSI include when to trigger it: either based on a time offset or when the next activity is scheduled to start. The scheduler may need to be invoked multiple times if the highest level switch case activity cannot be scheduled initially. To prevent over-consumption of the CPU, throttling can be used to impose a minimum time delay between invocations. Alternatively, rescheduling at a fixed cadence can also help avoid CPU over-consumption. In some cases, the nominal switch case activity may become committed before or during MSI invocations. When an activity is committed, it cannot be rescheduled and will execute within the commit window. To handle a committed activity, two options are available: either keep it committed and do not elevate to a higher switch case, or veto the activity to remove it from the current schedule. Vetoing allows the activity to be considered in a future scheduler invocation. After MSI completes, rescheduling may be necessary before committing the switch case. The scheduler must consider the elevated switch case for future events to avoid inconsistencies in the schedule. Disabling rescheduling until the switch case is committed is a potential solution to prevent complications in scheduling later activities. The performance of different rescheduling methods is evaluated by applying them to various sets of inputs derived from sol types, the best available data on expected Mars 2020 rover operations. The Mars 2020 surrogate scheduler, designed for a Linux workstation environment, is used to construct schedules and simulate plan execution, running faster than the operational scheduler. The surrogate scheduler is designed for a workstation environment and assists in validating the flight scheduler implementation for mission BID1. Activity durations from previous missions were completed early by around 30%, but there is a desire to operate with a less conservative margin for increased productivity. The model uses a normal distribution to determine activity execution durations, with a mean of 90% of the predicted duration and a standard deviation set so that 10% of durations will exceed the nominal duration. The execution duration is set to the nominal duration if chosen from a distribution longer to avoid complications. 80 variants are created from 8 sol types with switch groups. Scoring method evaluates the effectiveness of each method based on successful scheduling of activities. The scoring method evaluates the successful scheduling of activities, where mandatory activities contribute to the mandatory score and switch cases contribute to the switch group score based on their duration compared to the original activity. The maximum switch group score for a variant is 1. In the empirical results, mandatory activities are weighted higher than switch cases. The study compares different scheduling methods for switch cases based on incoming energy levels and aims to schedule all mandatory activities while maximizing switch group scores. The theoretical maximum switch group score is determined by an omniscient scheduler with prior knowledge of activity durations and resource availability. The omniscient scheduler prioritizes scheduling mandatory activities over higher level switch cases based on actual execution durations. It attempts to schedule all mandatory activities starting from the highest level switch case. The success of scheduling is determined by the Maximum Mandatory Score. Comparisons are made between methods that successfully schedule all mandatory activities, with a focus on switch group scores. The study compared different methods for scheduling mandatory activities, showing that always elevating to the highest level performed the worst, dropping approximately 0.25 activities per sol. Using preferred time to guard against time caused mandatory activities to drop for both fixed point and sol wide guard methods. The study compared different methods for scheduling mandatory activities, showing that using preferred time to guard against time caused a drop in activities for both fixed point and sol wide guard methods. The preferred time method with the fixed point guard dropped about 0.04 mandatory activities per sol, while the sol wide guard dropped about 0.1 mandatory activities per sol. Additionally, a higher incoming SOC can allow a higher level switch case to be scheduled, preventing future mandatory activities from being scheduled. The MSI approaches veto to handle situations where the nominal switch case becomes committed before or during MSI drop mandatory activities. The study compared different methods for scheduling mandatory activities, showing that vetoing the nominal switch case can result in dropping activities, leading to the inability to schedule all mandatory activities. The Fixed Point guard, Sol Wide guard, and two MSI approaches successfully schedule all mandatory activities, with the Sol Wide guard and MSI approach using Time Offset and Commit showing the highest switch group scores. The MSI approaches have increasing switch group scores with higher incoming SOC, leading to more energy for consumptive switch cases. The Fixed Point guard results in a lower switch case score due to checking against a state of charge constraint at a specific time. The guard constraint enforces scheduling at a specific time, even if activities end early, causing energy levels to fall below the Minimum SOC Guard value. The Sol Wide guard considers resources regained from early activities, unlike the Fixed Point guard. Higher incoming SOC levels lead to reaching the Maximum SOC constraint more easily. The energy gained from activities finishing early may not be used if it exceeds the Maximum SOC, potentially causing energy levels to drop below the guard value. Just-In-Case Scheduling BID3 creates a branching schedule to account for unexpected breaks, while BID8 addresses the RCPSP problem by dynamically rescheduling activities based on time and resource availability. The scheduler must make real-time decisions based on resource consumption and switch cases. Future work includes improving activity placement and analyzing start time windows. The Sol Wide Guard is used for computing the guard for Minimum SOC. The Sol Wide Guard is used to compute the guard for Minimum SOC. Instead of increasing the guard value by a fixed amount, binary search via Monte Carlo analysis is used for more precise determination. The Mars 2020 rover mission requires support for multiple switch groups in the input. Further exploration of MSI variants is needed, along with studying the effects of evenly spacing MSI invocations to avoid throttling. Disabling rescheduling after MSI is complete until the switch case is committed is being considered to understand potential drawbacks. The study focuses on analyzing the effects of time, energy, and data volume on switch cases. Several algorithms are presented to schedule mandatory activities and switch groups efficiently. Guard methods are discussed to reserve resources, and the MSI algorithm emulates backtracking. Empirical analysis is conducted using input sets of activities. The study analyzes the effects of time, energy, and data volume on switch cases. Various algorithms are proposed for scheduling mandatory activities efficiently. Guard methods are used to reserve resources, and the MSI algorithm simulates backtracking. Empirical analysis is performed using input sets of activities derived from data on expected planetary rover operations."
}