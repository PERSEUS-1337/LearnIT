{
    "title": "rkeeQmm0cX",
    "content": "Deep neural networks (DNNs) have emerged as a powerful solution this year for addressing longstanding issues in artificial intelligence. Deep neural networks (DNNs) are being applied to three cyber security use cases: Android malware classification, incident detection, and fraud detection. The experiments show that DNNs outperform classical machine learning algorithms due to their ability to extract and build better features. The experiments demonstrate that Deep Neural Networks (DNNs) outperform classical machine learning algorithms in cyber security use cases such as Android malware classification, incident detection, and fraud detection. DNNs extract better features leading to higher accuracy compared to other systems. In the modern era, with new opportunities emerging, security measures are crucial to combat threats like hacking for data theft. Cyber security is essential for protecting systems and data from hacking and malware threats. Antivirus and blacklists are commonly used but are not always effective in detecting new malware. Efficient systems are needed to detect and prevent fraudulent activities in organizations. Deep learning approaches are crucial for cyber security due to their effectiveness in detecting new malware. This paper evaluates the use of deep neural networks for Android malware classification, incident detection, and fraud detection. It discusses related work, background knowledge of DNNs, methodology, and results. Section III discusses the background knowledge of deep neural networks (DNNs) and Section IV presents the proposed methodology including the description of the data set. Results are displayed in Section V, with the conclusion in Section VI. The related work for cyber security use cases includes Android malware classification, incident detection, and fraud detection. Static and dynamic analysis are commonly used approaches in Android malware detection, with static analysis preferred in Android devices for its advantageous features. In Android malware detection, static analysis is preferred for its advantages such as low computational cost and time consumption. Dynamic analysis can detect metamorphic and polymorphic malwares. Traditional machine learning classifiers performed well using a combination of API calls and permission features. MalDozer utilizes deep learning to detect and classify Android malware based on sequences of API calls, performing well in both private and public datasets. The system utilizes deep learning to detect Android malware and classify them by family, performing well in both private and public datasets. Various cloud security issues are discussed, including machine learning based anomaly detection and intrusion detection for cloud infrastructure. Security problems in the cloud are addressed, proposing incident detection systems that outperform intrusion detection. In BID9, a comparative study of machine learning classifiers for financial fraud detection was conducted. BID10 discussed data mining approaches for the same purpose. Deep learning, a sub model of machine learning, is widely used in cybersecurity, with a unique DNN architecture proposed for efficient use in various cybersecurity scenarios. The paper aims to explain DNN architecture and training techniques concisely. Artificial neural networks represent a directed graph of interconnected artificial neurons. Artificial neural networks (ANNs) are a directed graph of interconnected artificial neurons, influenced by biological neural networks. A feed forward network (FFN) is a simple type of ANNs, with a subset called multi-layer perceptron (MLP) consisting of 3 or more layers. The number of hidden layers in MLP can be increased for complex data, with the complexity parameterized based on the data. Multi-layer perceptron (MLP) can have an increased number of hidden layers for complex data, with the complexity parameterized based on the data. The hidden layers form an acyclic graph that passes information forward without depending on past input. Rectified linear units (ReLU) are efficient for training large amounts of data, accelerating the training process. Rectified linear units (ReLU) are efficient for accelerating the training process of large amounts of data in multi-layer perceptron (MLP). TensorFlow and Keras are used as software frameworks, with GPU-enabled TensorFlow for faster gradient descent computations. Deep learning architectures are trained using back propagation through time (BPTT) technique. Task 1 involves classifying Android malware using a dataset of unique API information from APK files. Task 1 involves classifying Android malware using a dataset of unique API information from APK files collected from the Opera Mobile Store. Task 2 includes incident detection using operational log files from Unified Threat Management of UniteCloud. The curr_chunk contains operational log file data from Unified Threat Management (UTM) of UniteCloud BID25, used for e-learning and e-research services in New Zealand. The log file features measurements from 9 sensors, labeled based on incident status. Task 3 dataset for fraud detection is anonymized and unified using HCRUD approach. Detailed statistics for Task 1, Task 2, and Task 3 datasets are reported in TAB0. Experimentation was conducted to find an optimal learning rate. The highest 10-fold cross validation accuracy was achieved with a learning rate of 0.1, despite fluctuations at 0.2. Further experiments with more complex architectures showed lower performance within 500 epochs, leading to the decision to stick with a learning rate of 0.1. Various network topologies were tested to optimize the structure for the input data. The study focused on optimizing network structures for input data by testing different DNN architectures with varying numbers of layers. Most architectures learned normal category patterns within 600 epochs, but the number of epochs needed for malicious category data varied. Complex architectures required more iterations for best accuracy. The best performing network topology differed for each task, with 4 layer DNNs performing well for Task 2 and Task 3, and 5 layer DNNs outperforming 4 layer DNNs for Task 1. The decision was made to use 5 layer DNNs for the remaining experiments. The study compared 4 layer DNNs to 5 layer DNNs and found that the latter performed better. The proposed DNN architecture includes an input layer, 5 hidden layers, and an output layer with varying numbers of neurons for different tasks. The network is trained using backpropagation and includes fully-connected, batch normalization, and dropout layers. The proposed deep neural network architecture includes fully-connected layers, batch normalization, and dropout layers to prevent overfitting and speed up model training. Dropout and Batch Normalization are used between fully-connected layers to improve performance. The deep networks in alternative architectures for Task 1 could easily overfit without regularization, even with a large number of samples. In alternative architectures for Task 1, deep networks may overfit training data without regularization. The final fully connected layer uses sigmoid activation for Task 1 and Task 2, softmax for Task 3. It classifies benign as 0 and malicious as 1, providing probability scores. Prediction loss is calculated using binary cross entropy for Task 1 and Task 2, and categorical cross entropy for Task 3. SGD is used as an optimizer to minimize loss. The DNN model is evaluated against classical ML classifiers in three cyber security use cases: identifying Android malware, incident detection on UniteCloud, and fraud detection in financial transactions. Input matrices of different shapes are passed through multiple hidden layers, with XGBoost used for Extreme Gradient Boosting. XGBoost, short for Extreme Gradient Boosting, is based on the original Gradient Boosting model. It is used for supervised learning problems with multiple features to predict a target variable. \"multi:softmax\" is used for classification, with a max depth of 20 for the tree. 10 fold cross validation is performed for training accuracy. Data is loaded using Pandas, with NaN values replaced with 0. Task 1 involves a term-document matrix representation using count vectorizer from scikit-learn. The proposed method achieved high accuracy on Task 2 in comparison to the winner of CDMC 2017 using Random Forest classifier with Python scikit-learn BID11. DNNs performance varied slightly from the winner, but can be improved by adding hidden layers. The method can automatically obtain the best features for cyber security tasks like Android malware classification. The performance of deep neural networks (DNNs) for cyber security tasks like Android malware classification, incident detection, and fraud detection has been evaluated. DNNs outperformed classical machine learning classifiers in all cases and can be further improved by adding more layers to the existing architectures. This direction is suggested for future work."
}