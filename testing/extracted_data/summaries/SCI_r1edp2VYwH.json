{
    "title": "r1edp2VYwH",
    "content": "Stemming is the process of removing affixes( i.e. prefixes, infixes and suffixes) that improve the accuracy and performance of information retrieval systems.This paper presents the reduction of Amharic words to corresponding stem where with the intention that it preserves semantic information. The proposed approach efficiently removes affixes from an Amharic word. The process of removing such affixes (prefixes, infixes and suffixes) from a word to its base form is called stemming. While many stemmers exist for dominant languages such as English, under resourced languages such as Amharic which lacks such powerful tool support. In this paper, we design a light Amharic stemmer relying on the rules that receives an Amharic word and then it finds a match to the beginning of a word to the possible prefixes and to its ending with the possible suffixes and finally it checks whether it has infix. The final result is the stem if there is any prefix, infix or/and suffix, otherwise it remains in one of the earlier states. The technique does not rely on any additional resource (e.g. dictionary) to verify the generated stem. The performance of the generated stemmer is evaluated using manually annotated Amharic words. The result is compared with current state-of-the-art stemmer for Amharic showing an increase of 7% in stemmer correctness. Amharic is a highly morphological rich language that adds more challenge for the stemmer performance. The main aim of stemming is to reduce the different morphological (e.g. inflectional or derivational) variations of word forms associated the linguistic information such as number, case, gender, tense, definitive, functional, etc. to its common base form or roots (Jivani et al., 2011) . In this work, we follow a simple methodology that depends on the removal of affixes from Amharic words. The idea for designing Amharic stemmer is relying on stripping affixes of Amharic words. The algorithm in the stemmer searches a match of substring pattern expressions which represents affixes from Amharic input word to produce the remaining substring of Amharic word as base form if one of affixes is found. In other words, the rules in the patterns used in the stemmer help to reduce affixes from a word. The patterns representing the affixes of Amharic language are implemented using python library. In general, the existing stemmer algorithms have problems stated as follows: (i) Amharic is a morphologically rich language, that makes development of efficient stemmer very difficult. E.g. A given Amharic verb can have more than 80 different forms. (ii) It is difficult to handle infixes appropriately by a stemmer. (iii) It is challenging to identify and stem Amharic compound words as the language is complex in nature and thus it is not governed by specific rules. (iv) Handling loan words adds additional factors in degrading the performance of stemmer. (v) It is a universal problem to develop stemmer algorithms with minimal errors as it is caused by over-stemming or under-stemming and mis-stemming. Specifically, in this research, we try to answer the following research questions: (i) how do we handle the best possible prefixes lists, suffixes lists and set of conditions to enforce reduplicative words in Amharic texts? (ii) How can we design light stemmer for Amharic texts? (iii) How can we evaluate and enhance the performance of the stemmer? (iv)Does stemming improve performance of Amharic sentiment classification system? The rest of this paper is organized as follows: in the section 2, the related works are presented. The proposed Amharic Stemmer is described in section 3. In section 4, stemmer evaluations are presented. Conclusions and recommendations are drawn in section 5. This work presents design of Amharic light stemmer that removes affixes for hoping to efficiently improve performance of Amharic Sentiment Classification by preserving semantic information. Few of the contributions of this work are summarized as follows: \u2022 The work reveals that Amharic stemmer improves performance of sentiment classification compared to SOTA(i.e. compared to hornmorpho). \u2022 As Amharic alphabets are in the unicode, rather than transliterating into romans using SERA in (Yacob, 1997) , we developed custom transliteration of Amharic texts into CV form using Amharic Alphabets \u2022 The approach developed is generic enough that it can be adapted to develop stemmer to other resource limited languages. \u2022 Apart from sentiment classification, our stemmer can also be used to other tasks of natural language processing including information extraction, multilingual semantic lexicons, question and answering, just to name a few. \u2022 Our stemmer is light in the sense that it is efficient for IR applications in terms of processing time to generate root word for a particular Amharic input word with considerable accuracy. \u2022 Related resources including the code will be accessible online for research communities. Yet, the developed Amharic light stemmer may lack accuracy of correctly stemming Amharic input words. One of the reasons is that the affix list is not comprehensive enough to cover all the variant word forms of the same root. The other thing is that the approach we used is similar to the approach used in look-up table that lacks context information for the affixes specifically prefixes and suffixes of length one might be ambiguous with part of root consonant character. So to handle this, hybrid approach or corpus based methods should be incorporated."
}