{
    "title": "Hkgs3aNYDS",
    "content": "The Expectation-Maximization (EM) algorithm is a fundamental tool in unsupervised machine learning. It is often used as an efficient way to solve Maximum Likelihood (ML) and Maximum A Posteriori estimation problems, especially for models with latent variables. It is also the algorithm of choice to fit mixture models: generative models that represent unlabelled points originating from $k$ different processes, as samples from $k$ multivariate distributions. In this work we define and use a quantum version of EM to fit a Gaussian Mixture Model. Given quantum access to a dataset of $n$ vectors of dimension $d$, our algorithm has convergence and precision guarantees similar to the classical algorithm, but the runtime is only polylogarithmic in the number of elements in the training set, and is polynomial in other parameters - as the dimension of the feature space, and the number of components in the mixture. We generalize further the algorithm by fitting any mixture model of base distributions in the exponential family. We discuss the performance of the algorithm on datasets that are expected to be classified successfully by those algorithms, arguing that on those cases we can give strong guarantees on the runtime. Over the last few years, the effort to find real world applications of quantum computers has greatly intensified. Along with chemistry, material sciences, finance, one of the fields where quantum computers are expected to be most beneficial is machine learning. A number of different algorithms have been proposed for quantum machine learning (Biamonte et al., 2017; Wiebe et al., 2017; Kerenidis & Prakash, 2018; Harrow et al., 2009; Suba\u015f\u0131 et al., 2019; Farhi & Neven, 2018) , both for the supervised and unsupervised setting, and despite the lack of large-scale quantum computers and quantum memory devises, some quantum algorithms have been demonstrated in proof-of-principle experiments (Li et al., 2015; Otterbach et al., 2017; Jiang et al., 2019) . Here, we look at Expectation-Maximization (EM), a fundamental algorithm in unsupervised learning, that can be used to fit different mixture models and give maximum likelihood estimates with the so-called latent variable models. Such generative models are one of the most promising approaches for unsupervised problems. The goal of a generative model is to learn a probability distribution that is most likely to have generated the data collected in a training set V \u2208 R n\u00d7d of n vectors of d features. Fitting the model consists in learning the parameters of a probability distribution p in a certain parameterized family that best describes our vectors v i . We will see that, thanks to this formulation, we can reduce a statistical problem into an optimization problem using maximum likelihood estimation (ML) estimation. The likelihood is the function that we use to measure how good a model is for explaining a given dataset. For a given machine learning model with parameters \u03b3, the likelihood of our data set V is the probability that the data have been generated by the model with parameters \u03b3, assuming each point is independent and identically distributed. We think the likelihood as a function of \u03b3, holding the dataset V fixed. For p(v i |\u03b3) the probability that a point v i comes from model \u03b3, the likelihood is defined as L(\u03b3; V ) := n i=1 p(v i |\u03b3). From this formula, we can see that in order to find the best parameters \u03b3 * of our model we need to solve an optimization problem. For numerical and analytical reasons, instead of maximizing the likelihood L, it is common practice to find the best model by maximizing the log-likelihood function (\u03b3; V ) = log L(\u03b3; V ) = n i=1 log p(v i |\u03b3). In this context, we want to find the model that maximizes the log-likelihood: \u03b3 * M L := arg max \u03b3 n i=1 log p(v i |\u03b3). The procedure to calculate the log-likelihood depends on the specific model under consideration. A possible solution would be to use a gradient based optimization algorithm on . Unfortunately, due to the indented landscape of the function, gradient based techniques often do not perform well. Therefore, it is common to solve the maximum likelihood estimation (or maximum a priori) problem using the Expectation-Maximization (EM) algorithm. EM is an iterative algorithm which is guaranteed to converge to a (local) optimum of the likelihood. This algorithm has a striking variety of applications, and has been successfully used for medical imaging (Balafar et al., 2010) , image restoration (Lagendijk et al., 1990) , problems in computational biology (Fan et al., 2010) , and so on. EM has been proposed in different works by different authors, but has been formalized as we know it only in 1977 (Dempster et al., 1977) . For more details, we refer to (Lindsay, 1995; Bilmes et al., 1998) . In this work, we introduce Quantum Expectation-Maximization (QEM), a new algorithm for fitting mixture models. We detail its usage in the context of Gaussian Mixture Models, and we extend the result to other distributions in the exponential family. We also generalize the result by showing how to compute the MAP: the Maximum A Posteriori estimate of a mixture model. MAP estimates can be seen as the Bayesian version of maximum likelihood estimation problems. MAP estimates are often preferred over ML estimates, due to a reduced propensity to overfit. Our main result can be stated as: Result (Quantum Expectation-Maximization). (see Theorem 3.9) For a data matrix V \u2208 R n\u00d7d stored in an appropriate QRAM data structure and for parameters \u03b4 \u03b8 , \u03b4 \u00b5 > 0 , Quantum Expectation-Maximization (QEM) fits a Maximum Likelihood (or a Maximum A Posteriori) estimate of a Gaussian Mixture Model with k components, in running time per iteration which is dominated by: where \u03a3 is a covariance matrix of a Gaussian distribution, \u03b7 is a parameter of the dataset related to the maximum norm of the vectors, \u03b4 \u03b8 , \u03b4 \u00b5 are error parameters in the QEM algorithm, \u00b5(< \u221a d) is a factor appearing in quantum linear algebra and \u03ba is the condition number of a matrix. Here we only kept the term in the running time that dominates for the range of parameters of interest. In Theorem 3.9 we explicate the running time of each step of the algorithm. The QEM algorithm runs for a number of iterations until a stopping condition is met (defined by a parameter \u03c4 > 0) which implies a convergence to a (local) optimum. Let's have a first high-level comparison of this result with the standard classical algorithms. The runtime of a single iteration in the standard implementation of the EM algorithm is at least O(knd 2 ) (Pedregosa et al., 2011; Murphy, 2012) . The advantage of the quantum algorithm is an exponential improvement with respect to the number of elements in the training set, albeit with a worsening on other parameters. It is crucial to find datasets where such a quantum algorithm can offer a speedup. For a reasonable range of parameters ( d = 40, k = 10, \u03b7 = 10, \u03b4 = 0.5, \u03ba(V ) = 25, \u03ba(\u03a3) = 5, \u00b5(\u03a3) = 4) which is motivated by some experimental evidence reported in Section 4, datasets where the number of samples in the order of O(10 12 ) might be processed faster on a quantum computer. One should expect that some of the parameters of the quantum algorithm can be improved, especially the dependence on the condition numbers and the errors, which can make enlarge the type of datasets where QEM can offer an advantage. Note that we expect the number of iterations of the quantum algorithm to be proportional to the number of iteration of the classical case. This is to be expected since the convergence rate does not change, and it is corroborated by previous experimental evidence in a similar scenario: the number of iterations needed by q-means algorithm for convergence, is proportional to the number of iterations of the classical k-means algorithm (Kerenidis et al., 2018) . Expectation-Maximization is widely used for fitting mixture models in machine learning (Murphy, 2012) . Most mixture models use a base distribution in the exponential family: Poisson (Church & Gale, 1995 ), Binomial, Multinomial, log-normal (Dexter & Tanner, 1972 ), exponential (Ghitany et al., 1994 , Dirichlet multinomial (Yin & Wang, 2014) , and others. EM is also used to fit mixtures of experts, mixtures of the student T distribution (which does not belong to the exponential family, and can be fitted with EM using (Liu & Rubin, 1995) ) and for factor analysis, probit regression, and learning Hidden Markov Models (Murphy, 2012)."
}