{
    "title": "rywDjg-RW",
    "content": "Synthesizing user-intended programs from a small number of input-output exam-\n ples is a challenging problem with several important applications like spreadsheet\n manipulation, data wrangling and code refactoring. Existing synthesis systems\n either completely rely on deductive logic techniques that are extensively hand-\n engineered or on purely statistical models that need massive amounts of data, and in\n general fail to provide real-time synthesis on challenging benchmarks. In this work,\n we propose Neural Guided Deductive Search (NGDS), a hybrid synthesis technique\n that combines the best of both symbolic logic techniques and statistical models.\n Thus, it produces programs that satisfy the provided specifications by construction\n and generalize well on unseen examples, similar to data-driven systems. Our\n technique effectively utilizes the deductive search framework to reduce the learning\n problem of the neural component to a simple supervised learning setup. Further,\n this allows us to both train on sparingly available real-world data and still leverage\n powerful recurrent neural network encoders. We demonstrate the effectiveness\n of our method by evaluating on real-world customer scenarios by synthesizing\n accurate programs with up to 12\u00d7 speed-up compared to state-of-the-art systems. Automatic synthesis of programs that satisfy a given specification is a classical problem in AI BID29 , with extensive literature in both machine learning and programming languages communities. Recently, this area has gathered widespread interest, mainly spurred by the emergence of a sub-area -Programming by Examples (PBE) BID10 . A PBE system synthesizes programs that map a given set of example inputs to their specified example outputs. Such systems make many tasks accessible to a wider audience as example-based specifications can be easily provided even by end users without programming skills. See Figure 1 for an example. PBE systems are usually evaluated on three key criteria: (a) correctness: whether the synthesized program We studied the problem of real-time program synthesis with a small number of input-output examples. For this problem, we proposed a neural-guided system that builds upon PROSE, a state-of-the-art symbolic logic based system. Our system avoids top-down enumerative grammar exploration required by PROSE thus providing impressive synthesis performance while still retaining key advantages of a deductive system. That is, compared to existing neural synthesis techniques, our system enjoys following advantages: a) correctness: programs generated by our system are guaranteed to satisfy the given input-output specification, b) generalization: our system learns the user-intended program with just one input-output example in around 60% test cases while existing neural systems learn such a program in only 16% test cases, c) synthesis time: our system can solve most of the test cases in less than 0.1 sec and provide impressive performance gains over both neural as well symbolic systems.The key take-home message of this work is that a deep integration of a symbolic deductive inference based system with statistical techniques leads to best of both the worlds where we can avoid extensive engineering effort required by symbolic systems without compromising the quality of generated programs, and at the same time provide significant performance (when measured as synthesis time) gains. For future work, exploring better learning models for production rule selection and applying our technique to diverse and more powerful grammars should be important research directions.A ROBUSTFILL PERFORMANCE WITH DIFFERENT BEAM SIZES"
}