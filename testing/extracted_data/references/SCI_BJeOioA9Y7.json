{
    "title": "BJeOioA9Y7",
    "content": "A zoo of deep nets is available these days for almost any given task, and it is increasingly unclear which net to start with when addressing a new task, or which net to use as an initialization for fine-tuning a new model. To address this issue, in this paper, we develop knowledge flow which moves \u2018knowledge\u2019 from multiple deep nets, referred to as teachers, to a new deep net model, called the student. The structure of the teachers and the student can differ arbitrarily and they can be trained on entirely different tasks with different output spaces too. Upon training with knowledge flow the student is independent of the teachers. We demonstrate our approach on a variety of supervised and reinforcement learning tasks, outperforming fine-tuning and other \u2018knowledge exchange\u2019 methods.\n\n Research communities have amassed a sizable number of deep net architectures for different tasks, and new ones are added almost daily. Some of those architectures are trained from scratch while others are fine-tuned, i.e., before training, their weights are initialized using a structurally similar deep net which was trained on different data. Beyond fine-tuning, particularly in reinforcement learning, teachers have also been considered in one way or another by BID23 ; BID6 ; BID30 ; BID13 ; BID0 BID21 ; BID2 ; BID26 ; BID20 . For instance, progressive neural net BID23 keeps multiple teachers during both training and inference, and learns to extract useful features from the teachers for a new target task. PathNet BID6 uses genetic algorithms to choose pathways from a giant network for learning new tasks. ' Growing a Brain' BID30 fine-tunes a neural network while growing the network's capacity (wider or deeper layers). Actor-mimic BID20 pre-trains a big model on multiple source tasks, then the big model is used as a weight initialization for a new model which will be trained on a new target task. Knowledge distillation BID9 distills knowledge from a large ensemble of models to a smaller student model. However, all the aforementioned techniques have limitations. For example, progressive neural net models BID23 grow with the number of teachers. This large number of parameters limits the number of teachers a progressive neural net can handle, and largely increases the training and testing time. In PathNet BID6 , searching over a big network for pathways is computationally intensive. For fine-tuning based methods such as 'Growing a Brain' BID30 and actor-mimic BID20 , only one pretrained model can be used at a time. Hence, their performance heavily relies on the chosen pretrained model. To address these shortcomings, we develop knowledge flow which moves 'knowledge' of multiple teachers when training a student. Irrespective of how many teachers we use, the student is guaranteed to become independent at the final stage of training and the size of the resulting student net remains constant. In addition, our framework makes no restrictions on the deep net size of the teacher and student, which provides flexibility in choosing teacher models. Importantly, our approach is applicable to a variety of tasks from reinforcement learning to fully-supervised training. We evaluate knowledge flow on a variety of tasks from reinforcement learning to fully-supervised learning. In particular, we follow BID23 ; BID6 and compare on the same \u221e k=0 \u03b3 k r t+k , where \u03b3 is the discount factor. The expected future reward when observing state x and when following policy \u03c0 \u03b8\u03c0 is defined as V \u03c0 \u03b8\u03c0 (x t ) = E \u03c4 \u223c\u03c0 \u03b8\u03c0 [R t |x t ], where \u03c4 = {(x t , a t , r t ), (x t+1 , a t+1 , r t+1 ), . . .} is a trajectory generated by following \u03c0 \u03b8\u03c0 from state x t .The goal of reinforcement learning is to find a policy that maximizes the expected future reward from each state x t . Without loss of generality, in this paper, we follow the asynchronous advantage actor-critic (A3C) formulation BID17 . In A3C, the policy mapping \u03c0 \u03b8\u03c0 (x) = arg max a\u2208A\u03c0\u03b8\u03c0 (a|x) is obtained from a probability distribution over states, wher\u00ea \u03c0 \u03b8\u03c0 (a|x) is modeled by a deep net with parameters \u03b8 \u03c0 . The value function is also approximated by a deep net V \u03b8v (x), having parameters \u03b8 v .To optimize the policy parameters \u03b8 \u03c0 given a state x t , a loss function based on a scaled negative log-likelihood and a negative entropy regularizer is common: DISPLAYFORM0 [\u2212 log\u03c0 \u03b8\u03c0 (a t |x t )(R t \u2212 V \u03b8v (x t )) \u2212 \u03b2H(\u03c0 \u03b8\u03c0 (\u00b7|x t ))] .Hereby, R t = k\u22121 i=0 \u03b3 i r t+i + \u03b3 k V \u03b8v (x t+k ) is the empirical k-step return obtained when starting in state x t , and |\u03c4 | is the length of the trajectory \u03c4 generated by following \u03c0 \u03b8\u03c0 . The scalar \u03b2 \u2265 0 is a user-specified constant, and H(\u03c0 \u03b8\u03c0 (\u00b7|x t )) is the entropy function, which encourages exploration by favoring a uniform probability distribution\u03c0 \u03b8\u03c0 (a|x). To optimize the value function V \u03b8v , it is common to use the squared loss DISPLAYFORM1 By minimizing the empirical expectation of \u03c4 \u03c0 (\u03b8 \u03c0 ) and \u03c4 v (\u03b8 v ), i.e., by addressing DISPLAYFORM2 alternatingly, we learn a policy and a value function that maximize expected return. Instead of optimizing the programs given in Eq.(1) and Eq. (2) from scratch, the aforementioned warm-start techniques (see Sec. 5 for more) are applicable. To address their mentioned shortcomings, we propose knowledge flow, a framework that moves 'knowledge' from an arbitrary number of deep nets, henceforth referred to as 'teachers' to a deep net under training, called the 'student.' (c) Average normalized weights for teachers' and the student's layers. At the beginning of training, the student heavily relies on teacher one. As training progresses, teacher one's weight decreases, and the student's weight increases until the student is eventually independent. DISPLAYFORM0 Knowledge flow is outlined on example deep nets in FIG0 . We train the parameters of the student net which are randomly initialized. To this end we take advantage of teachers, whose parameters are fixed and obtained from pre-trained models on different source tasks by different algorithms. For example, for reinforcement learning, we may consider teachers trained by A3C BID17 , A2C or DQN BID16 .'Knowledge' of multiple teachers is transferred to a student by adding transformed and scaled intermediate representations from the teacher deep nets to the student net. To achieve this, we modify the student net, i.e., f \u03b8 in the supervised setting and \u03c0 \u03b8\u03c0 (a|x), V \u03b8v (x) in the reinforcement learning case. We add teacher representations which are transformed by multiplication with a trainable matrix Q and scaled via a weight p w that is normalized to sum to one for each student layer and parameterized via trainable parameters w. The normalized weights encode which of the teachers' or the student's representation to trust at every layer of the student net. Note that a teacher can help the student at different levels of abstraction with input from different levels of its net. Importantly, after training, the student model should perform well on the target task without relying on teachers. To achieve this, as training progresses, we increasingly encourage a high normalized weight on the student representation, which forces the student to eventually capture all the 'knowledge.' Due to the trainable scaling, at an early stage of training, we observe the student to rely heavily on the 'knowledge' of the teacher to quickly obtain better performance. However, as training proceeds, the student is encouraged to become more and more independent. During final stages of training, the student will no longer be able to rely on teachers, which ensures that the student has learned to master the desired task on its own. This is observed in FIG0 To formally encourage this successive transfer we introduce two additional loss functions. The first, referred to as the dependency loss dep (w), captures how much a student relies on teachers. It depends on the weight vector w which encodes the strength of the coupling. The second one ensures that a student's behavior doesn't change rapidly when the teachers' influence decreases. We use loss KL (\u00b7, \u00b7) to capture the change. By combining student net modifications and additional loss terms, for the supervised task we obtain DISPLAYFORM0 and for reinforcement learning the transformed program reads as follows: DISPLAYFORM1 Loss\u02dc \u00b7 \u00b7 (\u03b8, w, Q) originates from the original loss \u00b7 \u00b7 (\u03b8) (Eqs. FORMULA3 - FORMULA2 ) by transforming the deep net to include cross-connections, hence its dependence on w, Q. The tilde ('\u00b7') denotes this dependence, also for probability distributionf and policy distribution\u03c0. Parameters from the current and a previous iteration are referred to via \u03b8 and \u03b8 old respectively. For both supervised and reinforcement learning, \u03bb 1 and \u03bb 2 control the strength which is used to decrease the influence of the teacher. A low \u03bb 1 allows the student to rely on teachers. Close to the end of training, the student should be independent. Therefore, we set \u03bb 1 to a small value at the beginning, and gradually increase its value as training progresses. Note that we don't make any assumptions about teachers and student's objective. If a teacher's and student's objective differ, negative transfer may occur initially. However, the proposed method quickly decreases the weight for teacher layers to reduce this effect. Despite differences, students could potentially still benefit from the low level representation of the teachers. We do observe this low level knowledge transfer in our experiments. In the following we first describe how to modify the deep nets, before we detail the loss functions dep and KL , which are used to successively decrease the influence of the teachers. For each layer j in the student model, we define a candidate set L j , which contains l j 0 and all the teachers' layers to be considered. For example, in FIG0 , layer one of the student model is combined with layer one of teacher one and layer two of teacher two. Therefore, the candidate set of layer one of the student model is given by DISPLAYFORM2 To decide which teachers' or the student's representation to trust at every layer of the student net, we introduce a normalized weight p j w (l) for all j \u2208 {1, . . . , L 0 }, where l \u2208 L j , summing to one for each layer j in the student deep net, i.e., DISPLAYFORM3 To obtain the combined intermediate representation of layer j for the student model, we use DISPLAYFORM4 DISPLAYFORM5 The maximal number of introduced matrices Q in our framework is DISPLAYFORM6 In practice, we don't link a student's layer to every layer of a teacher network. Intuitively, a teachers' bottom layer BID6 and progressive neural network (PNN) BID23 . Since PathNet and PNN don't report exact scores we obtain their numbers from their plots and indicate that with a \u223c symbol. The results of the state-of-the-art methods: A3C BID17 , PPO , and ACKTR BID31 features are very likely irrelevant to a student's top layer features. Indeed, we observed that linking a teachers' bottom layer to a student's top layer generally doesn't yield improvements. Therefore, in practice, we recommend to link one teacher layer to one or two student layers, in which case we introduce on the order of M L 0 matrices Q. Also note that while additional trainable parameters Q and w are introduced in our framework, Q and w are not part of the resulting student network since we ensure p DISPLAYFORM7 at the end of training as discussed next. Hence, the additional parameters function as auxiliary knobs that help the student learn faster. In the final stage of training, the student will be independent (see FIG0 (c)) and does no longer rely on Q, w, or any transformed representations from teachers. Decreasing Teachers' Influence: We successively decrease the influence of the teachers during training by gradually encouraging the normalized weight p j w (l j 0 ) to increase to a value of 1 \u2200j \u2208 {1, 2, . . . , L 0 }. To capture how much the student relies on teachers, we introduce the dependence cost as the negative log probability: DISPLAYFORM8 By minimizing dep (w), we encourage weights for the layers of the student to increase. Hence we encourage the student to become more and more independent. During the final stage of training, p j w (l j 0 ) approaches one for all j \u2208 {1, . . . , L 0 }, making the student independent of the transformed representation obtained from teachers. Empirically, we found that a fast decrease of the influence of the teacher can degrade the performance. This is intuitive as it requires some time to find good transformations Q. Moreover, decreasing the influence of a teacher too fast may change the output distribution over labels or actions of the student model too much, and thus lead to performance loss. To prevent changing a student's output distribution too fast, we found a Kullback-Leibler (KL) regularizer to yield good results. More specifically, in the case of supervised learning we use DISPLAYFORM9 Hereby, \u03b8 is the set of current parameters, and \u03b8 old are the previous ones. In the reinforcement learning case we use DISPLAYFORM10 In the following we evaluate knowledge flow on reinforcement and supervised learning tasks. Results are reported by using only the student model to avoid even the smallest influence from any teacher nets. We evaluate knowledge flow on reinforcement learning using Atari games that were used by BID23 BID6 . Following existing work, the input to our agent are raw images from the environment. The agent learns to predict actions only based on the rewards and the input images from the environment. The agent chooses an action every four frames, and the last action is repeated on the skipped four frames. For all teacher models and the student model, we use the fully forward architecture of A3C BID17 . The model has three hidden layers. The first layer is a convolutional layer with 16 filters of size 8x8 and stride 4. The second layer is a convolutional layer with 32 filters of size 4x4 and stride 2. The third layer is a fully connected layer with 256 hidden units. Following the third hidden layer are two sets of output. One is a softmax output that provides a probability distribution over all valid actions. The other one is a scalar output that provides the estimated value function. We use the same hyper-parameter settings as BID17 except for the learning rate. BID17 use RMSProp with shared statistics while we use Adam with shared statistics, which we found to give better results when training the baselines. The learning rate is set to 10 \u22124 and gradually decreased to zero for all experiments. To select \u03bb 1 and \u03bb 2 in our framework, we follow progressive neural net BID23 : randomly sample \u03bb 1 \u2208 {0.05, 0.1, 0.5} and \u03bb 2 \u2208 {0.001, 0.01, 0.05}. Note that \u03bb 1 is set to zero at the beginning of training, and linearly increased to the sampled value at the end of training. Following BID23 , we repeat each experiment 25 times with different random seeds and randomly sampled \u03bb 1 and \u03bb 2 . The results of the top three out of 25 runs are reported. As A3C, we run 16 agents on 16 CPU cores in parallel. Evaluation Metrics: We follow the evaluation procedure of BID16 . The trained student models are evaluated by playing each game for 30 episodes. We also follow the 'no-op' procedure: at the beginning of each testing episode, the agents perform up to 30 'no-op' actions. Results: We first compare our framework with PathNet BID6 and progressive neural net (PNN) BID23 , which are state-of-the-art transfer reinforcement learning frameworks, using their experimental settings. The comparison is summarized in TAB0 . The state-of-the-art results BID17 BID31 on Atari games are also included in TAB0 for reference. Compared to PathNet, a student model trained using our transfer framework with one teacher achieves higher scores in 11 out of 14 experiments. Compared with PNN, for a two-teacher framework, our trained student model has only 0.7M parameters and PNN has 16M parameters. Nonetheless we observe higher scores in five out of the seven experiments. The results demonstrate that knowledge flow effectively transfers knowledge from teachers to the student. TAB0 also indicates that, in our framework, when the number of teachers increases from one to two, the student's performance improves significantly across all experiments. The training curves for the experiments are shown in FIG1 . The curve is the average of the top three out of 25 runs. We observe our approach to generally perform very well. To further evaluate knowledge flow, we experiment with different combinations of environment/teacher settings. These settings are not used by PathNet and progressive neural network. The results are summarized in TAB2 , where \"ours w/ expert\" represents that one teacher is expert for the target game; \"ours w/ non-expert\" represents that both teachers are not experts for the target game; \"Fine-tune\" represents fine-tuning from a non-expert on a new target game; \"A3C baseline\" represents our implementation of the A3C baseline; \"A3C\" represents the scores reported originally BID17 . Note that our A3C implementation achieves better scores than those reported by BID17 for most of the games. As shown in TAB2 , knowledge flow with expert teacher performs better than the baseline across all experiments, which we interpret as evidence that knowledge flow successfully transfers 'knowledge' from an expert teacher to the student. In addition, knowledge flow with non-expert teachers also outperforms fine-tuning on a non-expert teacher. The reasons are twofold: First, a student model in knowledge flow can learn from multiple teachers while the fine-tuning method can only start from one setting. Second, in knowledge flow, the student can avoid the negative impact from insufficiently pretrained teachers, while fine-tuning from an insufficiently pretrained model slows down the training process and may degrade the overall performance. The training curves for the experiments are shown in FIG5 . More training curves are in the Appendix (Fig. 6 ). Note that in knowledge flow, the student can benefit from the intermediate representations of the teacher, even if input space, output space and objectives differ. For example, in FIG5 , the two teachers are Chopper Command and Space Invaders, which are quite different from the target game Seaquest. The student model still benefits from learning from the teachers and achieves scores ten times larger than learning without teacher and fine-tuning from a teacher. For supervised learning, we use a variety of image classification benchmarks, including CIFAR-10 (Krizhevsky, 2009), CIFAR-100 BID12 , STL-10 (Coates et al., 2011) , and EM-NIST BID4 . The parameters \u03bb 1 for the dependent cost and \u03bb 2 for the KL cost are determined using the validation set of each dataset. Evaluation Metrics: To evaluate the trained student model we report top-1 error rate on the test set of each dataset. All plots and reported numbers are the average of three runs obtained using different random seeds. (b) CIFAR-10/CIFAR-100: CIFAR-10 and CIFAR-100 datasets consist of colored images of size 32 \u00d7 32. CIFAR-10 (C10) has 10 classes and CIFAR-100 (C100) has 100 classes. For both dataset, the training and test sets contain 50,000 and 10,000 images respectively. We perform all experiments on CIFAR-10 and CIFAR-100 with standard data augmentation BID10 .We use Densenet BID10 ) (depth 100, growth rate 24) as a baseline and follow their hyper-parameter settings to train our baseline, teacher and student models. For our approach, we first train teachers on CIFAR-10, CIFAR-100, and SVHN BID18 . We then train the student model using a different combination of teachers. We compare our results to fine-tuning and the baseline model. As shown in TAB3 (a), for the CIFAR-10 target task, fine-tuning from the CIFAR-100 expert improves 4% over the baseline. Fine-tuning from the SVHN expert performs worse than the baseline model. Intuitively, for the CIFAR-10 target task, the CIFAR-100 deep net is a good teacher while a deep net trained with SVHN isn't. Presented with both good and inadequate teachers, knowledge flow improves by 13% over the baseline. This demonstrates that knowledge flow can not only leverage a good teacher's 'knowledge,' but it can also avoid misleading influence. As detailed in TAB3 (b), the results are similar on the CIFAR-100 dataset. To further demonstrate the properties of knowledge flow, additional results are in the appendix. As mentioned before, 'knowledge' transfer has been considered using a variety of techniques. We briefly discuss related work in contrast to our approach in the following and defer details to Sec. 8. PathNet BID6 enables multiple agents to train the same deep net while reusing parameters and avoiding catastrophic forgetting. In contrast to this formulation we consider availability of multiple pre-trained teacher nets. Progressive Net BID23 ) leverages transfer and avoids catastrophic forgetting by introducing lateral connections to previously learned features. Our discussed method uses similar lateral connections. However, in contrast to BID23 , our method ensures independence of the student upon training, addressing a limitation in BID23 where only a fraction of the capacity of the student is eventually utilized. Distral a neologism combining 'distill & transfer learning' BID26 considers joint training of multiple tasks. Multiple tasks share a 'distilled' policy which encodes common behavior between different tasks. While each worker addresses its own task, a shared policy encourages consistency between the policies. Different from Distral, which is a multi-task learning framework, knowledge flow addresses a single task, while in multi-task learning, multiple tasks are addressed at the same time. Hence, common for multi-task learning and knowledge flow is a transfer of information. However, in multi-task learning, information extracted from different tasks are shared to boost performance, while, in knowledge flow, the information of multiple teachers is leveraged to help a student learn better a single, new, previously unseen task. Other related work includes actor-mimic BID20 , learning without forgetting BID13 , growing a brain BID30 , policy distillation , domain adaptation BID19 , knowledge distillation BID9 or lifelong learning BID2 . A more detailed discussion on related work is provided in Sec. 8 of the supplementary material. We developed a general knowledge flow approach that permits to train a deep net from any number of teachers. We showed results for reinforcement learning and supervised learning, demonstrating improvements compared to training from scratch and to fine-tuning. In the future we plan to learn when to use which teacher and how to actively swap teachers during training of a student. BID9 to distill knowledge from a larger model (teacher) to a smaller model (student). The student models have 50% -5% parameters of the teacher models. Following their setup, we conduct experiments on MNIST, MNIST with digit '3' missing in the training set, CIFAR-100, and ImageNet. For MNIST and MNIST with digit '3' missing, following KD, the teacher model is an MLP with two hidden layers of 1200 hidden units, and the student model is an MLP with two hidden layers of 800 hidden units. For CIFAR-100, we use the model from Chen FORMULA2 as teacher model. The student model follows the structure of the teacher, but the number of output channels of each convolutional layer is halved. For ImageNet, the teacher model is a 50-layer ResNet BID8 , and the student model is a 18-layer ResNet. The test error of the distilled student model are summarize in TAB4 . Our framework has consistently better performance than KD, because the student model in our framework benefits not only from the output layer behavior of the teacher but also from intermediate layer representations of the teacher. The 'EMNIST Letters' dataset consists of images of size 28 \u00d7 28 pixels showing handwritten letters. It has 26 balanced classes. Each class contains lower and upper case letters. The training and test sets contain 124,800 and 20,800 images respectively. The 'EMNIST Digits' dataset consists of images of size 28 \u00d7 28 pixels showing handwritten digits. It has 10 balanced classes. The training and test sets contain 240,000 and 40,000 images respectively. In this case we use the MNIST model from Chen (2017) as a baseline, teacher and student model. We trained teachers on EMNIST Digits, EMNIST Letters, and EMNIST Letters with only 13 classes. Our target task is EMNIST Letters. The student model is trained with different teachers and the results are compared to fine-tuning, the baseline model, and the state-of-the-art results on EMNIST.The results are summarized in Table 5 . Compared to the baseline and fine-tuning, student learning in our framework with expert teacher (EMNIST Letters), semi-expert teacher (Half EMNIST Letters), and non-expert teacher (EMNIST Digits) all have better performance. In FIG6 we illustrate the accuracy over epochs for training of different models. The STL-10 dataset consist of colored images of size 96 \u00d7 96 pixels. It has 10 balanced classes. The training set contains 5,000 labeled images and 100,000 unlabeled images. The test set contains 8,000 images. In our experiment, we only use the 5,000 labeled images for training. We use the STL-10 model from Chen (2017) as our baseline, teacher and student model. We trained teachers on CIFAR-10 and CIFAR-100. We compare our results to fine-tuning and the baseline in Table 6 . Note that STL-10 is very similar to CIFAR-10 and CIFAR-100. Therefore, both CIFAR-10 and CIFAR-100 are very good teachers. As shown in Table 6 , compared to the baseline, fine-tuning a Table 6 : Our approach on the STL-10 dataset (fully supervised). Zhao et al. FORMULA2 25.20 BID27 21.34Baseline 25.50 Fine-tune from C1014.32 Fine-tune from C100 14.38 Ours (C100) 12.35 Ours (C10, C100) 11.09 model using weights pretrained on CIFAR-10 and CIFAR-100 reduce test errors by more than 10%.Compared with fine-tuning, student model training in our framework further reduces the test error by 3%. Note that we only train on the labeled data while other approaches use this data for testing of semi-supervised approaches. Hence our results are obtained using fewer data and may not be directly comparable. We still list their results in Table 6 for reference. In Fig. 5 we illustrate the accuracy over the epochs of training. We also compare to Distral BID26 , which is the state-of-the-art multi-task reinforcement learning framework. We used 'KL + ent 1 col', which has a central model (m 0 ), and a task model (m i ) for each task. We perform the experiments on Atari games. In the experiments, we have three tasks (task 1, task 2, task 3). The teachers of task 2 (m 2 ) and task 3 (m 3 ) are provided for our framework. Distral is trained for 120M steps (40M steps/task), and our model is trained for 40M steps. For fair comparison, we report results of Distral's task 1 model (m 1 ), which is better than its center model (m 0 ). The results are summarized in TAB5 . Distral is suboptimal, because it aims to learn a multi-task agent. In addition, identical action and state space is assumed. When the target task is very different from the source tasks, Distral cannot decrease the teacher influence. In contrast, our framework can decrease a teacher's influence, and thus reduce negative transfer. Following the reviewer's suggestion, we plot the averaged normalized weight (p w ) for teachers and the student in the C10 experiment, where C100 and SVHN experts are teachers. Intuitively, the C100 teacher should have a higher p w value than the SVHN teacher, because C100 is more relevant to C10. The plot verifies this intuition. As shown in FIG8 , p w of the C100 teacher is higher than that of the SVHN teacher over the entire training. Note, both teachers' normalized weights approach zero at the end of training. To verify that the student really benefits from the knowledge of teachers, we conduct an ablation study suggested by a reviewer. We use teacher models that haven't been trained at all. Intuitively, learning with untrained teachers should have worse performance than learning with knowledgeable teachers. Our experiments verify this intuition. In Fig. 8 (a) , where the target task is hero, learning with untrained teachers ('w/ untrained teachers') achieves an average reward of 15934. Learning with knowledgeable teachers ('Ours with seaquest and riverraid teacher') achieves an average reward of 30928. More results are presented in Figs. 8 (b, c) . The results show that knowledge flow achieves higher rewards than training with untrained teachers in different environments and teacher-student settings. The KL term prevents the student's output distribution over actions or labels from drastic changes when the teachers' influence is decreasing. To investigate the importance of the KL term, we conduct an ablation study where the KL coefficient (\u03bb 2 ) is set to zero. The result is summarized in Fig. 9 . Considering Fig. 9 (a) , where the target task is MsPacman and the teachers are Riverraid and Seaquest experts. Without the KL term, when a teacher's influence decreases, the rewards drop drastically. In contrast, with a KL term, we don't observe performance drops. At the end of training, learning with the KL term achieves an average reward of 2907 and learning without the KL term achieves an average reward of 1215. More results are presented in Fig. 9 (b, c) , which shows that training with the KL term achieves higher reward than training without the KL term. In additional experiments, following the suggestion of a reviewer, we use architectures for the teacher which differ from the student model. More specifically, we use the model of BID16 as a teacher model. The teacher model consists of 3 convolutional layers, which have 32, 64, and 64 filters, followed by a hidden fully connected layer which has 512 ReLUs. We use the model of BID17 as the student model. The student model consists of 2 convolutional layers, which have 16 and 32 filters respectively, followed by a hidden fully connected layer which has 256 ReLUs. Both models' fully connected layers are followed by two output layers for actions and values. In the experiments, we link each teacher's first convolutional layer to the student's first convolutional layer. Moreover, we link each teacher's third convolutional layer to the student's second convolutional layer, and each teacher's fully connected layer to the student's fully connected layer. In the experiment, the target task is KungFu Master, and the teachers are experts for Seaquest and Riverraid. The results are summarized in FIG0 . We observed that learning with teachers, whose architecture differs from the student, to have similar performance as learning with teachers which have the same architecture. Consider as an example FIG0 , where the target task is KungFu Master, and the teachers are experts for Seaquest and Riverraid. At the end of training, learning with teachers of different architectures achieves an average reward of 37520, and learning with teachers of the same architecture achieves an average reward of 35012. More results are shown in FIG0 . The results show that knowledge flow can enable higher rewards, even if the teachers and the student architectures differ. 7.6 AVERAGE NETWORK AS \u03b8 old For the parameters \u03b8 old an average network can be used. To investigate how usage of an average network to obtain the parameters \u03b8 old affects the performance, we conduct an experiment where \u03b8 old is computed using the exponential running average of the model weight. More specifically, \u03b8 old is updated as follows: \u03b8 old \u2190 \u03b1 \u00b7 \u03b8 old + (1 \u2212 \u03b1) \u00b7 \u03b8, where \u03b1 = 0.9. The results are summarized in FIG0 . We observe that using an exponential average to compute \u03b8 old results in very similar performance as using a single model. Consider FIG0 , where the target task is Boxing and the teacher is a Riverraid expert. At the end of training, using an average network to obtain \u03b8 old achieves an average reward of 96.2 and using a single network to obtain \u03b8 old achieves an average reward of 96.0. More results on using an average network are shown in FIG0 (b, c). As mentioned before, variants of 'knowledge' transfer have been considered using a variety of techniques, for instance, fine-tuning, progressive neural nets BID23 , PathNet BID6 , 'Growing a Brain' BID30 , actor-mimic BID20 , learning without forgetting BID13 . Also related are techniques on transfer learning and lifelong learning. We discuss those methods and contrast them to our approach in the following. PathNet BID6 enables multiple agents to train the same giant deep net while reusing parameters and avoiding catastrophic forgetting. To this end, agents embedded in the neural net discover which weights can be reused for new tasks and restrict application of gradients to those parameters. In contrast to this formulation we consider availability of multiple teacher nets, which are trained. Progressive Net BID23 ) leverages transfer and avoids catastrophic forgetting by introducing lateral connections to previously learned features. Our discussed method uses similar lateral connections. However, in contrast to BID23 , we introduce scaling with normalized weights. This ensures independence of the student upon training, addressing a limitation in BID23 where only a fraction of the capacity of the student is eventually utilized. Distral a neologism combining 'distill & transfer learning' BID26 considers joint training of multiple tasks. Multiple tasks share a 'distilled' policy which encodes common behavior between different tasks. While each worker addresses its own task, a shared policy encourages consistency between the policies. Different from Distral, which is a multi-task learning framework, knowledge flow addresses a single task, while in multi-task learning, multiple tasks are addressed at the same time. Hence, common for multi-task learning and knowledge flow is a transfer of information. However, in multi-task learning, information extracted from different tasks are shared to boost performance, while, in knowledge flow, the information of multiple teachers is leveraged to help a student learn better a single, new, previously unseen task. Knowledge distillation BID9 distills information form a larger deep net into a smaller one. It assumes both nets are trained on the same dataset. In contrast, our technique allows knowledge transfer between different source and target domains. Actor-mimic BID20 enables an agent to learn how to address multiple tasks simultaneously and generalize the extracted knowledge to new domains. A single policy net learns how to act in a set of tasks following the guidance of several expert teachers. A combination of feature regression and cross entropy loss is used to encourage the student to produce similar actions and representations. Our proposed technique differs in that we take advantage of a teachers representation at the beginning of training, Learning without forgetting BID13 permits to add a new task to a deep net without forgetting the original capabilities. Importantly, only data from the new task is used and the old capabilities are retained by first recording the old networks output on the new data. Similar techniques have been developed by BID7 BID11 . In contrast, we transfer 'knowledge' from teacher networks more explicitly."
}